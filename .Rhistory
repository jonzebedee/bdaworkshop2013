?rbinom
rbinom(10, 1, 0.5)
rbinom(1e6, 1, 0.5)
sum(rbinom(1e6, 1, 0.5))
sum(rbinom(1e6, 1, 0.5)) / 1e6
sum(rbinom(1e6, 1, 0.5)) / 1e6
infected <- rbinom(1e6, 1, 0.001)
alarm <- rep(0, length(infected))
alarm
test <- rep(0, length(infected))
lsos()
rm(alarm)
alarm[infected == TRUE
alarm[infected == TRUE]
alarm[infected == 1]
test[infected == 1]
test[infected == 1] <- rbinom(length(infected == 1), 1, 0.99)
test[infected == 1] <- rbinom(length(infected[infected == 1]), 1, 0.99)
test[infected == 1] <- rbinom(length(infected[infected == 1]), 1, 0.99)
test[infected == 0] <- rbinom(length(infected[infected == 0]), 1, 0.05)
data.table(infected = infected, test = test)
library(data.table)
data.table(infected = infected, test = test)
pop.dt <- data.table(infected = infected, test = test)
dim(pop.dt)
pop.dt[infected == 1][test == 1]
dim(pop.dt[test == 1])
dim(pop.dt[test == 1][infected == 1])[1]
dim(pop.dt[test == 1][infected == 1])[1] / dim(pop.dt[test == 1])[1]
dim(pop.dt[infected == 1])
dim(pop.dt[infected == 1])[1] / 1e6
length(infected[infected == TRUE & test == TRUE])
length(infected[infected == TRUE & test == TRUE]) / length(test[test == TRUE])
q()
?rbinom
rbinom(10, 1, 0.5)
rbinom(10, 2, 0.5)
rbinom(10, 2, 0.5)
rbinom(1000000, 2, 0.5)
test <- rbinom(1000000, 2, 0.5)
test
length(test)
length(test[test == 0])
length(test[test == 0]) / length(test)
length(test[test == 1]) / length(test)
length(test[test == 2]) / length(test)
getwd()
source('helper_functions.R')
lsos()
generate.disease.test.data
generate.disease.test.data()
generate.disease.test.data
generate.disease.test.data(10)
data <- generate.disease.test.data(10)
data[, 1]
data[1, ]
source('helper_functions.R')
data <- generate.disease.test.data()
calculate.disease.test.probabilities(data)
calculate.disease.test.probabilities(generate.disease.test.data(prior.prob = 0.0001))
calculate.disease.test.probabilities(generate.disease.test.data(prior.prob = 0.001, false.alarm = 0.01))
calculate.disease.test.probabilities(generate.disease.test.data(prior.prob = 0.001, false.alarm = 0.001))
calculate.disease.test.probabilities(generate.disease.test.data(prior.prob = 0.001, hit.rate = 0.99, false.alarm = 0.01))
calculate.disease.test.probabilities(generate.disease.test.data(prior.prob = 0.001, hit.rate = 0.99, false.alarm = (1 - hit.rate)))
calculate.disease.test.probabilities(generate.disease.test.data(prior.prob = 0.001, hit.rate = 0.99, false.alarm = (1 - 0.99)))
calculate.disease.test.probabilities(generate.disease.test.data(prior.prob = 0.001, hit.rate = 0.999, false.alarm = (1 - 0.99)))
calculate.disease.test.probabilities(generate.disease.test.data(prior.prob = 0.001, hit.rate = 0.99, false.alarm = (1 - 0.999)))
source('helper_functions.R')
data <- generate.disease.test.data()
data
infected <- data[1, ]
test.1   <- data[2, ]
test.2   <- data[3, ]
dim(data)
data <- generate.disease.twotest.data()
data[1, ]
data[2, ]
length(data)
dim(data)
infected <- data[1, ]
test.1   <- data[2, ]
test.2   <- data[3, ]
length(infected[infected == 1 & test.1 == 1 & test.2 == 1])
length(infected[infected == 1 & test.1 == 1 & test.2 == 1]) / length(infected[test.1 == 1 & test.2 == 1])
length(infected[infected == 1 & test.1 == 1]) / length(infected[test.1 == 1])
data <- generate.disease.twotest.data(false.alarm.1 = 0.01, false.alarm.2 = 0.01)
infected <- data[1, ]; test.1 <- data[2, ]; test.2 <- data[3, ];
length(infected[infected == 1 & test.1 == 1]) / length(infected[test.1 == 1])
length(infected[infected == 1 & test.1 == 1 & test.2 == 1]) / length(infected[test.1 == 1 & test.2 == 1])
data <- generate.disease.twotest.data(false.alarm.1 = 0.05, false.alarm.2 = 0.05)
length(infected[infected == 1 & test.1 == 1 & test.2 == 1]) / length(infected[test.1 == 1 & test.2 == 1])
infected <- data[1, ]; test.1 <- data[2, ]; test.2 <- data[3, ];
length(infected[infected == 1 & test.1 == 1 & test.2 == 1]) / length(infected[test.1 == 1 & test.2 == 1])
q()
y
source('helper_functions.R')
lsos()
cointoss10 <- readRDS(file = 'cointoss10.rds')
cointoss10
calculate.data.probability(cointoss10, seq(0, 1, length.out = 1000))
theta.grid <- seq(0, 1, length.out = 1000)
prob.out <- calculate.data.probability(cointoss10, theta.grid)
library(ggplot2)
qplot(theta.grid, prob.out, geom = 'line')
cointoss10
sum(theta.grid * prob.out)
prob.out / sum(theta.grid * prob.out)
prob.norm <- prob.out / sum(theta.grid * prob.out)
qplot(theta.grid, prob.norm, geom = 'line')
max(prob.norm)
prob.norm[prob.norm == max(prob.norm)]
match(prob.norm, max(prob.norm))
match(max(prob.norm), prob.norm)
theta.grid(match(max(prob.norm), prob.norm))
theta.grid[match(max(prob.norm), prob.norm)]
theta.grid <- seq(0, 1, by = 0.001)
prob.out <- calculate.data.probability(cointoss10, theta.grid)
prob.norm <- prob.out / sum(theta.grid * prob.out)
theta.grid[match(max(prob.norm), prob.norm)]
theta.grid <- seq(0, 1, by = 0.0001)
prob.out <- calculate.data.probability(cointoss10, theta.grid)
source('helper_functions.R')
prob.out <- calculate.data.probability(cointoss10, theta.grid)
qplot(theta.grid, prob.norm, geom = 'line')
theta.grid
length(theta.grid)
length(prob.norm)
prob.norm <- calculate.data.probability(cointoss10, theta.grid)
length(prob.norm)
lsos()
rm(prob.out)
qplot(theta.grid, prob.norm, geom = 'line')
ls()
lsos()
x <- seq(0, 1, by = 0.001)
y <- x^2
 N <- length(x)
N
midpoint <- 0.5 * (y[-1] + y[-N])
sum(diff(x) * midpoint)
x <- seq(0, 1, by = 0.0001)
x <- seq(0, 1, by = 0.0001); y <- x^2; N <- length(x); midpoint <- 0.5 * (y[-1] + y[-N]);
sum(diff(x) * midpoint)
x <- seq(0, 1, by = 0.0001); y <- x^1; N <- length(x); midpoint <- 0.5 * (y[-1] + y[-N]);
sum(diff(x) * midpoint)
y
lsos()
midpoint
y[1] + diff(y)
y[1] + cumsum(diff(y))
source('helper_functions.R')
lsos()
calculate.data.probability
calculate.posterior.density
dbeta
lsos()
rm(x, y, N)
lsos()
dbeta(theta.grid, 1, 1)
calculate.posterior.density(
calculate.posterior.density
calculate.posterior.density(dbeta(theta.grid, 1, 1), cointoss10, theta.grid)
source('helper_functions.R')
calculate.posterior.density(dbeta(theta.grid, 1, 1), cointoss10, theta.grid)
source('helper_functions.R')
calculate.posterior.density
calculate.posterior.density(dbeta(theta.grid, 1, 1), cointoss10, theta.grid)
source('helper_functions.R')
calculate.posterior.density(dbeta(theta.grid, 1, 1), cointoss10, theta.grid)
source('helper_functions.R')
calculate.posterior.density(dbeta(theta.grid, 1, 1), cointoss10, theta.grid)
source('helper_functions.R')
calculate.posterior.density(dbeta(theta.grid, 1, 1), cointoss10, theta.grid)
qplot(theta.grid, calculate.posterior.density(dbeta(theta.grid, 1, 1), cointoss10, theta.grid), geom = 'line')
qplot(theta.grid, calculate.posterior.density(dbeta(theta.grid, 10, 10), cointoss10, theta.grid), geom = 'line')
qplot(theta.grid, calculate.posterior.density(dbeta(theta.grid, 10, 15), cointoss10, theta.grid), geom = 'line')
qplot(theta.grid, dbeta(theta.grid, 10 + 4, 15 + 6), geom = 'line')
source('helper_functions.R')
qplot(theta.grid, calculate.posterior.density(dbeta(theta.grid, 10, 15), cointoss10, theta.grid), geom = 'line')
calculate.posterior.density(dbeta(theta.grid, 1, 1), cointoss10, theta.grid)
val <- calculate.posterior.density(dbeta(theta.grid, 1, 1), cointoss10, theta.grid)
cointoss10
dbeta(theta.grid, 1+4, 1+6) - val
max(dbeta(theta.grid, 1+4, 1+6) - val)
min(dbeta(theta.grid, 1+4, 1+6) - val)
max(abs(dbeta(theta.grid, 1+4, 1+6) - val))
(dbeta(theta.grid, 1+4, 1+6) - val) / max(abs(dbeta(theta.grid, 1+4, 1+6) - val))
val2 <- dbeta(theta.grid, 1+4, 1+6)
qplot(theta.grid, val, geom = 'line', colour = I('black'))
qplot(theta.grid, val, geom = 'line', colour = I('black')) + geom_line(aes(y = val2), colour = 'red')
qplot(theta.grid, val, geom = 'line', colour = I('black'), size = I(0.25)) + geom_line(aes(y = val2), colour = 'red')
qplot(theta.grid, val, geom = 'line', colour = I('black'), size = I(0.25)) + geom_line(aes(y = val2), colour = 'red', size = I(0.25))
library(MHadaptive)
Metro_Hastings
?Metro_Hastings
?mod
4 %% 3
Metro_Hastings(function(x) { return((x %% 7) / 7) }, 1)
sum((1:7) / 7)
sum((0:6) / 7)
Metro_Hastings(function(x) { return((x %% 7) / 21) }, 1)
test <- Metro_Hastings(function(x) { return((x %% 7) / 21) }, 1)
test
test[1:10]
 str(test)
?Metro_Hastings
test <- Metro_Hastings(function(x) { val <- 0; if(x >= 0 | x < 7) val <- x / 7; return(val) }, 1)
test <- Metro_Hastings(function(x) { val <- 0; if(x >= 0 | x < 7) val <- x / 7; return(val) }, 3)
test <- Metro_Hastings(function(x) { val <- ifelse((x >= 0 | x < 7), x / 21, 0); return(val) }, 3)
test <- Metro_Hastings(function(x) { val <- ifelse((x >= 0 | x <= 7), 2 * x / 49, 0); return(val) }, 3)
function(x) { val <- ifelse((x >= 0 | x <= 7), 2 * x / 49, 0); return(val) }
(function(x) { val <- ifelse((x >= 0 | x <= 7), 2 * x / 49, 0); return(val) })(seq(0, 7, by = 0.01))
(function(x) { val <- ifelse((x >= 0 | x <= 7), 2 * x / 49, 0); return(val) })(seq(0, 7, by = 0.01))
(function(x) { val <- ifelse((x >= 0 | x <= 7), 2 * x / 49, 0); return(val) })(seq(0, 7, by = 0.01))[701]
(function(x) { val <- ifelse((x >= 0 | x <= 7), 2 * x / 49, 0); return(val) })(seq(0, 7, by = 0.01))[701] * 7
(function(x) { val <- ifelse((x >= 0 | x <= 7), 2 * x / 49, 0); return(val) })(seq(0, 7, by = 0.01))
qplot(seq(0, 7, by = 0.01), (function(x) { val <- ifelse((x >= 0 | x <= 7), 2 * x / 49, 0); return(val) })(seq(0, 7, by = 0.01)), geom = 'line')
test <- Metro_Hastings(function(x) { val <- ifelse((x >= 0 | x <= 7), 2 * x / 49, 0); return(val) }, 1)
?Metro_Hastings
test <- Metro_Hastings(function(x) { val <- ifelse((x >= 0 | x <= 7), 2 * x / 49, 0); return(val) }, 1)
test <- Metro_Hastings(function(x) { val <- ifelse((x >= 0 | x <= 7), 2 * x / 49, 0); return(val) }, 1, verbose = TRUE)
test <- Metro_Hastings(function(x) { val <- ifelse((x >= 0 | x <= 7), 2 * x / 49, 0); return(val) }, 1, quiet = TRUE)
(function(x) { val <- ifelse((x >= 0 | x <= 7), 2 * x / 49, 0); return(val) })(seq(-10, 10, by = 0.01))
qplot(seq(-10, 10, by = 0.01), (function(x) { val <- ifelse((x >= 0 | x <= 7), 2 * x / 49, 0); return(val) })(seq(-10, 10, by = 0.01)), geom = 'line')
qplot(seq(-10, 10, by = 0.01), (function(x) { val <- ifelse((x >= 0 & x <= 7), 2 * x / 49, 0); return(val) })(seq(-10, 10, by = 0.01)), geom = 'line')
test <- Metro_Hastings(function(x) { val <- ifelse((x >= 0 & x <= 7), 2 * x / 49, 0); return(val) }, 1)
test
str(test)
test$trace[1:10]
test <- Metro_Hastings(function(x) { val <- ifelse((x >= 0 & x <= 7), 2 * x / 49, 0); return(val) }, 3)
test$trace[1:10]
distrib <- function(x) { val <- ifelse((x >= 0 & x <= 7), 2 * x / 49, 0); return(val) }
qplot(seq(-10, 10, by = 0.01), distrib(seq(-10, 10, by = 0.01)), geom = 'line')
Metro_Hastings(distrib, 1)
source('helper_functions.R')
theta
theta.grid
theta.grid <- seq(0, 1, by = 0.01)
mu.grid <- seq(0, 1, by = 0.01)
calculate.p.y.given.theta(cointoss10, theta.grid, mu.grid)
p.y.given.theta <- calculate.p.y.given.theta(cointoss10, theta.grid, mu.grid)
size(p.y.given.theta)
dim(p.y.given.theta)
qplot(p.y.given.theta, geom = 'contour')
melt(p.y.given.theta)
library(reshape2)
melt(p.y.given.theta)
melt.df <- melt(p.y.given.theta)
str(melt.df)
qplot(melt.df, geom = 'contour')
qplot(Var1, Var2, data = melt.df, geom = 'contour')
qplot(Var1, Var2, value, data = melt.df, geom = 'contour')
qplot(Var1, Var2, value, data = melt.df, geom = 'contour')
qplot(Var1, Var2, z = value, data = melt.df, geom = 'contour')
?outer
?dbern
?dbern
?dbeta
outer(seq(0, 1, by = 0.1), seq(0, 1, by = 0.1), function(x, y) { dbeta(x, y * 5, (1-y) * 5) })
dbeta(0, 1, 1)
dbeta(0, 0, 0)
1/501
(1/501)/2
seq(1/20,1-1/20, by = 1/10)
outer(seq(1/20, 1-1/20, by = 1/10), seq(1/20, 1-1/20, by = 1/10), function(x, y) { dbeta(x, y * 5, (1-y) * 5) })
outer(seq(1/20, 1-1/20, by = 1/10), seq(1/20, 1-1/20, by = 1/10), function(x, y) { dbeta(x, y * 100, (1-y) * 100) })
qplot(Var1, Var2, z = value, data = melt(outer(seq(1/20, 1-1/20, by = 1/10), seq(1/20, 1-1/20, by = 1/10), function(x, y) { dbeta(x, y * 5, (1-y) * 5) })), geom = 'contour')
N <- 10; qplot(Var1, Var2, z = value, data = melt(outer(seq(1/(N*2), 1-1/(N*2), by = 1/N), seq(1/(N*2), 1-1/(N*2), by = 1/N), function(x, y) { dbeta(x, y * 5, (1-y) * 5) })), geom = 'contour')
N <- 100; qplot(Var1, Var2, z = value, data = melt(outer(seq(1/(N*2), 1-1/(N*2), by = 1/N), seq(1/(N*2), 1-1/(N*2), by = 1/N), function(x, y) { dbeta(x, y * 5, (1-y) * 5) })), geom = 'contour')
N <- 100; data <- outer(seq(1/(N*2), 1-1/(N*2), by = 1/N), seq(1/(N*2), 1-1/(N*2), by = 1/N), function(x, y) { dbeta(x, y * 5, (1-y) * 5) }); qplot(Var1, Var2, z = value, data = melt(data), geom = 'contour')
qplot(1:length(data[, 1]), data[, 1], geom = 'line')
qplot(1:length(data[, 1]), data[1, ], geom = 'line')
qplot(1:length(data[, 1]), data[30, ], geom = 'line')
qplot(1:length(data[, 1]), data[95, ], geom = 'line')
N <- 1000; data <- outer(seq(1/(N*2), 1-1/(N*2), by = 1/N), seq(1/(N*2), 1-1/(N*2), by = 1/N), function(x, y) { dbeta(x, y * 5, (1-y) * 5) }); qplot(Var1, Var2, z = value, data = melt(data), geom = 'contour')
N <- 1000; data <- outer(seq(1/(N*2), 1-1/(N*2), by = 1/N), seq(1/(N*2), 1-1/(N*2), by = 1/N), function(x, y) { dbeta(x, y * 5, (1-y) * 5) });
N <- 10; data <- outer(seq(1/(N*2), 1-1/(N*2), by = 1/N), seq(1/(N*2), 1-1/(N*2), by = 1/N), function(x, y) { dbeta(x, y * 5, (1-y) * 5) });
data
print(data, digits = 4)
sprintf('%6.4f', data)
print(data, digits = 4)
print(data, digits = 2)
N <- 10; data <- outer(0, 1, by = 1/N), seq(0, 1, by = 1/N), function(x, y) { dbeta(x, y * 5, (1-y) * 5) });
N <- 10; data <- outer(seq(0, 1, by = 1/N), seq(0, 1, by = 1/N), function(x, y) { dbeta(x, y * 5, (1-y) * 5) });
data
data[, 1]
plot(1:11, data[, 2], geom = 'line')
qplot(1:11, data[, 2], geom = 'line')
qplot(1:11, data[, 6], geom = 'line')
qplot(1:11, data[, 9], geom = 'line')
qplot(1:11, data[, 10], geom = 'line')
N <- 10; data <- outer(seq(1/(N*2), 1-1/(N*2), by = 1/N), seq(1/(N*2), 1-1/(N*2), by = 1/N), function(x, y) { dbeta(x, y * 5, (1-y) * 5) });
qplot(1:11, data[, 10], geom = 'line')
data[, 10]
qplot(1:10, data[, 10], geom = 'line')
rep(1:10, 10)
?rep
matrix(rep(1:10, 10), nrow = 10)
matrix(rep(1:10, 10), nrow = 10, by.row = TRUE)
matrix(rep(1:10, 10), nrow = 10, byrow = TRUE)
source('helper_function')
source('helper_functions.R')
calculate.mu.prior
mu.grid
mu.grid <- seq(from = 1/(N*2), to = 1 - 1/(N*2), by = 1/N)
N
mu.grid
theta.grid <- mu.grid
calculate.mu.prior(mu.grid, theta.grid)
source('helper_functions.R')
calculate.mu.prior(mu.grid, theta.grid)
calculate.mu.prior(mu.grid, theta.grid)
source('helper_functions.R')
calculate.mu.prior(mu.grid, theta.grid)
source('helper_functions.R')
calculate.mu.prior(mu.grid, theta.grid)
source('helper_functions.R');
source('helper_functions.R'); calculate.hierarchical.posterior
source('helper_functions.R'); calculate.hierarchical.posterior(cointoss10, theta.grid, mu.grid, mu.prior, 5)
mu.prior <- dbeta(mu.grid, 1, 1)
mu.prior
source('helper_functions.R'); calculate.hierarchical.posterior(cointoss10, theta.grid, mu.grid, mu.prior, 5)
source('helper_functions.R'); posterior <- calculate.hierarchical.posterior(cointoss10, theta.grid, mu.grid, mu.prior, 5)
qplot(Val1, Val2, z = value, data = melt(posterior), geom = 'contour')
melt(posterior)
str(melt(posterior))
qplot(Var1, Var2, z = value, data = melt(posterior), geom = 'contour')
source('helper_functions.R'); mu.grid <- seq(1/(N*2), 1-1/(N*2), by = 1/N); theta.grid <- mu.grid; mu.prior <- dbeta(mu.grid, 1, 1); posterior <- calculate.hierarchical.posterior(cointoss10, theta.grid, mu.grid, mu.prior, 5)
qplot(Var1, Var2, z = value, data = melt(posterior), geom = 'contour')
source('helper_functions.R'); N <- 100; mu.grid <- seq(1/(N*2), 1-1/(N*2), by = 1/N); theta.grid <- mu.grid; mu.prior <- dbeta(mu.grid, 1, 1); posterior <- calculate.hierarchical.posterior(cointoss10, theta.grid, mu.grid, mu.prior, 5)
qplot(Var1, Var2, z = value, data = melt(posterior), geom = 'contour')
source('helper_functions.R'); N <- 500; mu.grid <- seq(1/(N*2), 1-1/(N*2), by = 1/N); theta.grid <- mu.grid; mu.prior <- dbeta(mu.grid, 1, 1); posterior <- calculate.hierarchical.posterior(cointoss10, theta.grid, mu.grid, mu.prior, 5)
qplot(Var1, Var2, z = value, data = melt(posterior), geom = 'contour')
?contour
contour(data)
persp(data)
source('helper_functions.R'); N <- 500; mu.grid <- seq(1/(N*2), 1-1/(N*2), by = 1/N); theta.grid <- mu.grid; mu.prior <- dbeta(mu.grid, 1, 1); posterior <- calculate.hierarchical.posterior(cointoss10, theta.grid, mu.grid, mu.prior, 5)
source('helper_functions.R'); N <- 500; mu.grid <- seq(1/(N*2), 1-1/(N*2), by = 1/N); theta.grid <- mu.grid; mu.prior <- dbeta(mu.grid, 1, 1); posterior <- calculate.hierarchical.posterior(cointoss10, theta.grid, mu.grid, mu.prior, 5)
posterior
length(posterior)
 dim(posterior)
source('helper_functions.R'); N <- 100; mu.grid <- seq(1/(N*2), 1-1/(N*2), by = 1/N); theta.grid <- mu.grid; mu.prior <- dbeta(mu.grid, 1, 1); posterior <- calculate.hierarchical.posterior(cointoss10, theta.grid, mu.grid, mu.prior, 5)
persp(x = mu.grid, y = theta.grid, z = posterior)
source('helper_functions.R'); N <- 10; mu.grid <- seq(1/(N*2), 1-1/(N*2), by = 1/N); theta.grid <- mu.grid; mu.prior <- dbeta(mu.grid, 1, 1); posterior <- calculate.hierarchical.posterior(cointoss10, theta.grid, mu.grid, mu.prior, 5)
persp(x = mu.grid, y = theta.grid, z = posterior)
source('helper_functions.R'); N <- 100; mu.grid <- seq(1/(N*2), 1-1/(N*2), by = 1/N); theta.grid <- mu.grid; mu.prior <- dbeta(mu.grid, 1, 1); posterior <- calculate.hierarchical.posterior(cointoss10, theta.grid, mu.grid, mu.prior, 5)
posterior
qplot(Var1, Var2, z = value, data = melt(posterior), geom = 'contour')
expand.grid(mu.grid, theta.grid)
expand.grid(mu.grid, theta.grid)[, 1:10]
expand.grid(mu.grid, theta.grid)[1:10]
head(expand.grid(mu.grid, theta.grid))
head(expand.grid(mu = mu.grid, theta = theta.grid))
head(cbind(expand.grid(mu = mu.grid, theta = theta.grid), posterior))
head(cbind(expand.grid(mu = mu.grid, theta = theta.grid), as.vector(posterior)))
head(cbind(expand.grid(mu = mu.grid, theta = theta.grid), posterior = as.vector(posterior)))
qplot(mu, theta, value = posterior, data = cbind(expand.grid(mu = mu.grid, theta = theta.grid), posterior = as.vector(posterior)))
qplot(mu, theta, data = cbind(expand.grid(mu = mu.grid, theta = theta.grid), posterior = as.vector(posterior)), colour = value)
qplot(mu, theta, data = cbind(expand.grid(mu = mu.grid, theta = theta.grid), posterior = as.vector(posterior)), colour = posterior)
qplot(mu, theta, data = cbind(expand.grid(mu = mu.grid, theta = theta.grid), posterior = as.vector(posterior)), geom = 'dot', colour = posterior)
qplot(mu, theta, data = cbind(expand.grid(mu = mu.grid, theta = theta.grid), posterior = as.vector(posterior)), geom = 'point', colour = posterior)
qplot(mu, theta, data = cbind(expand.grid(mu = mu.grid, theta = theta.grid), posterior = as.vector(posterior)), geom = 'point', fill = posterior)
qplot(mu, theta, data = cbind(expand.grid(mu = mu.grid, theta = theta.grid), posterior = as.vector(posterior)), geom = 'point', colour = posterior)
source('helper_functions.R'); N <- 250; mu.grid <- seq(1/(N*2), 1-1/(N*2), by = 1/N); theta.grid <- mu.grid; mu.prior <- dbeta(mu.grid, 1, 1); posterior <- calculate.hierarchical.posterior(cointoss10, theta.grid, mu.grid, mu.prior, 5)
qplot(mu, theta, data = cbind(expand.grid(mu = mu.grid, theta = theta.grid), posterior = as.vector(posterior)), geom = 'point', colour = posterior)
qplot(mu, theta, data = cbind(expand.grid(mu = mu.grid, theta = theta.grid), posterior = as.vector(posterior)), geom = 'point', colour = posterior, alpha = I(0.5))
qplot(mu, theta, data = cbind(expand.grid(mu = mu.grid, theta = theta.grid), posterior = as.vector(posterior)), geom = 'point', colour = posterior, alpha = I(0.5), size = I(0.25))
qplot(mu, theta, data = cbind(expand.grid(mu = mu.grid, theta = theta.grid), posterior = as.vector(posterior)), geom = 'point', colour = posterior, alpha = I(0.5), size = I(0.5))
qplot(mu, theta, data = cbind(expand.grid(mu = mu.grid, theta = theta.grid), posterior = as.vector(posterior)), geom = 'point', colour = posterior, alpha = I(1 <- , size = I(0.5))
qplot(mu, theta, data = cbind(expand.grid(mu = mu.grid, theta = theta.grid), posterior = as.vector(posterior)), geom = 'point', colour = posterior, alpha = I(1), size = I(0.5))
qplot(mu, theta, data = cbind(expand.grid(mu = mu.grid, theta = theta.grid), posterior = as.vector(posterior)), geom = 'point', colour = posterior, alpha = I(0.5), size = I(1))
qplot(mu, theta, data = cbind(expand.grid(mu = mu.grid, theta = theta.grid), posterior = as.vector(posterior)), geom = 'point', colour = posterior, alpha = I(0.5), size = I(2))
qplot(mu, theta, data = cbind(expand.grid(mu = mu.grid, theta = theta.grid), posterior = as.vector(posterior)), geom = 'point', colour = posterior, size = I(2))
qplot(mu, theta, data = cbind(expand.grid(mu = mu.grid, theta = theta.grid), posterior = as.vector(posterior)), geom = 'point', colour = posterior, size = I(2)) + scale_colour_continuous(low = 'blue', high = 'red')
source('helper_functions.R'); N <- 250; K <- 5; mu.grid <- seq(1/(N*2), 1-1/(N*2), by = 1/N); theta.grid <- mu.grid; mu.prior <- dbeta(mu.grid, 1, 1); posterior <- calculate.hierarchical.posterior(cointoss10, theta.grid, mu.grid, mu.prior, K)
source('helper_functions.R'); N <- 250; K <- 100; mu.grid <- seq(1/(N*2), 1-1/(N*2), by = 1/N); theta.grid <- mu.grid; mu.prior <- dbeta(mu.grid, 1, 1); posterior <- calculate.hierarchical.posterior(cointoss10, theta.grid, mu.grid, mu.prior, K)
qplot(mu, theta, data = cbind(expand.grid(mu = mu.grid, theta = theta.grid), posterior = as.vector(posterior)), geom = 'point', colour = posterior, size = I(2)) + scale_colour_continuous(low = 'blue', high = 'red')
source('helper_functions.R'); N <- 250; K <- 5; mu.grid <- seq(1/(N*2), 1-1/(N*2), by = 1/N); theta.grid <- mu.grid; mu.prior <- dbeta(mu.grid, 10, 10); posterior <- calculate.hierarchical.posterior(cointoss10, theta.grid, mu.grid, mu.prior, K)
qplot(mu, theta, data = cbind(expand.grid(mu = mu.grid, theta = theta.grid), posterior = as.vector(posterior)), geom = 'point', colour = posterior, size = I(2)) + scale_colour_continuous(low = 'blue', high = 'red')
source('helper_functions.R'); N <- 250; K <- 5; mu.grid <- seq(1/(N*2), 1-1/(N*2), by = 1/N); theta.grid <- mu.grid; mu.prior <- dbeta(mu.grid, 10, 10); use.data <- cointoss10; posterior <- calculate.hierarchical.posterior(use.data, theta.grid, mu.grid, mu.prior, K)
source('helper_functions.R'); N <- 250; K <- 5; mu.grid <- seq(1/(N*2), 1-1/(N*2), by = 1/N); theta.grid <- mu.grid; mu.prior <- dbeta(mu.grid, 10, 10); use.data <- cointoss1000; posterior <- calculate.hierarchical.posterior(use.data, theta.grid, mu.grid, mu.prior, K)
lsos()
cointoss100 <- readRDS('cointoss1000.rds')
source('helper_functions.R'); N <- 250; K <- 5; mu.grid <- seq(1/(N*2), 1-1/(N*2), by = 1/N); theta.grid <- mu.grid; mu.prior <- dbeta(mu.grid, 10, 10); use.data <- cointoss1000; posterior <- calculate.hierarchical.posterior(use.data, theta.grid, mu.grid, mu.prior, K)
cointoss1000 <- readRDS('cointoss1000.rds')
rm(cointoss100)
source('helper_functions.R'); N <- 250; K <- 5; mu.grid <- seq(1/(N*2), 1-1/(N*2), by = 1/N); theta.grid <- mu.grid; mu.prior <- dbeta(mu.grid, 10, 10); use.data <- cointoss1000; posterior <- calculate.hierarchical.posterior(use.data, theta.grid, mu.grid, mu.prior, K)
source('helper_functions.R'); N <- 250; K <- 5; mu.grid <- seq(1/(N*2), 1-1/(N*2), by = 1/N); theta.grid <- mu.grid; mu.prior <- dbeta(mu.grid, 10, 10); use.data <- cointoss1000; posterior <- calculate.hierarchical.posterior(use.data, theta.grid, mu.grid, mu.prior, K)
source('helper_functions.R'); N <- 250; K <- 5; mu.grid <- seq(1/(N*2), 1-1/(N*2), by = 1/N); theta.grid <- mu.grid; mu.prior <- dbeta(mu.grid, 10, 10); use.data <- cointoss1000; posterior <- calculate.hierarchical.posterior(use.data, theta.grid, mu.grid, mu.prior, K)
qplot(mu, theta, data = cbind(expand.grid(mu = mu.grid, theta = theta.grid), posterior = as.vector(posterior)), geom = 'point', colour = posterior, size = I(2)) + scale_colour_continuous(low = 'blue', high = 'red')
cointoss1000
length(cointoss1000[cointoss1000 == 1])
length(cointoss10[cointoss10 == 1])
qplot(mu, theta, data = cbind(expand.grid(mu = mu.grid, theta = theta.grid), posterior = as.vector(posterior)), geom = 'point', colour = posterior) + scale_colour_continuous(low = 'blue', high = 'red')
source('helper_functions.R'); N <- 250; K <- 100; mu.grid <- seq(1/(N*2), 1-1/(N*2), by = 1/N); theta.grid <- mu.grid; mu.prior <- dbeta(mu.grid, 10, 10); use.data <- cointoss1000; posterior <- calculate.hierarchical.posterior(use.data, theta.grid, mu.grid, mu.prior, K)
qplot(mu, theta, data = cbind(expand.grid(mu = mu.grid, theta = theta.grid), posterior = as.vector(posterior)), geom = 'point', colour = posterior) + scale_colour_continuous(low = 'blue', high = 'red')
source('helper_functions.R'); N <- 250; K <- 1000; mu.grid <- seq(1/(N*2), 1-1/(N*2), by = 1/N); theta.grid <- mu.grid; mu.prior <- dbeta(mu.grid, 10, 10); use.data <- cointoss1000; posterior <- calculate.hierarchical.posterior(use.data, theta.grid, mu.grid, mu.prior, K)
qplot(mu, theta, data = cbind(expand.grid(mu = mu.grid, theta = theta.grid), posterior = as.vector(posterior)), geom = 'point', colour = posterior) + scale_colour_continuous(low = 'blue', high = 'red')
source('helper_functions.R'); N <- 250; K <- 10000; mu.grid <- seq(1/(N*2), 1-1/(N*2), by = 1/N); theta.grid <- mu.grid; mu.prior <- dbeta(mu.grid, 10, 10); use.data <- cointoss1000; posterior <- calculate.hierarchical.posterior(use.data, theta.grid, mu.grid, mu.prior, K)
qplot(mu, theta, data = cbind(expand.grid(mu = mu.grid, theta = theta.grid), posterior = as.vector(posterior)), geom = 'point', colour = posterior) + scale_colour_continuous(low = 'blue', high = 'red')
source('helper_functions.R'); N <- 250; K <- 10000; mu.grid <- seq(1/(N*2), 1-1/(N*2), by = 1/N); theta.grid <- mu.grid; mu.prior <- dbeta(mu.grid, 100, 100); use.data <- cointoss1000; posterior <- calculate.hierarchical.posterior(use.data, theta.grid, mu.grid, mu.prior, K)
qplot(mu, theta, data = cbind(expand.grid(mu = mu.grid, theta = theta.grid), posterior = as.vector(posterior)), geom = 'point', colour = posterior) + scale_colour_continuous(low = 'blue', high = 'red')
source('helper_functions.R'); N <- 250; K <- 100; mu.grid <- seq(1/(N*2), 1-1/(N*2), by = 1/N); theta.grid <- mu.grid; mu.prior <- dbeta(mu.grid, 100, 100); use.data <- cointoss1000; posterior <- calculate.hierarchical.posterior(use.data, theta.grid, mu.grid, mu.prior, K)
qplot(mu, theta, data = cbind(expand.grid(mu = mu.grid, theta = theta.grid), posterior = as.vector(posterior)), geom = 'point', colour = posterior) + scale_colour_continuous(low = 'blue', high = 'red')
source('helper_functions.R'); N <- 250; K <- 100; mu.grid <- seq(1/(N*2), 1-1/(N*2), by = 1/N); theta.grid <- mu.grid; mu.prior <- dbeta(mu.grid, 100, 100); use.data <- cointoss10; posterior <- calculate.hierarchical.posterior(use.data, theta.grid, mu.grid, mu.prior, K)
qplot(mu, theta, data = cbind(expand.grid(mu = mu.grid, theta = theta.grid), posterior = as.vector(posterior)), geom = 'point', colour = posterior) + scale_colour_continuous(low = 'blue', high = 'red')
q()
y
lsos()
rm(val, val2)
rm(distrib)
likelihood
rm(likelihood)
rm(midpoint)
lsos()
rm(melt.df, test)
lsos()
lsos(n = 50)
library(rjags)
jagsModel <- jags.model('singlemint_singlecoin.jag', data = list(nFlips = length(cointoss10), y = cointoss10), n.chains = 4, n.adapt = 100)
update(jagsModel, n.iter = 100)
jagsModel <- jags.model('singlemint_singlecoin.jag', data = list(nFlips = length(cointoss10), y = cointoss10), n.chains = 4, n.adapt = 100)
update(jagsModel, n.iter = 100)
output.samples <- coda.samples(jagsModel, n.iter = 100)
output.samples <- coda.samples(jagsModel, variable.names = c('mu', 'theta'), n.iter = 100)
output.samples
str(output.samples)
output.samples <- coda.samples(jagsModel, variable.names = c('mu', 'theta'), n.iter = 1000)
str(output.samples)
as.matrix(output.samples)
str(as.matrix(output.samples))
coda.sample.data <- output.samples;
rm(output.samples)
mcmc.samples <- as.matrix(coda.sample.data)
qplot(mcmc.samples[, 'mu'], geom = 'density')
library(ggplot2)
qplot(mcmc.samples[, 'mu'], geom = 'density')
qplot(mcmc.samples[, 'theta'], geom = 'density')
qplot(mcmc.samples[, 'mu'], mcmc.samples[, 'theta'], geom = 'point', alpha = I(0,1))
mcmc.samples[, 'mu']
mcmc.samples[, 'theta']
qplot(mcmc.samples[, 'mu'], mcmc.samples[, 'theta'], geom = 'point', alpha = I(0,1))
qplot(mcmc.samples[, 'mu'], mcmc.samples[, 'theta'], alpha = I(0,1))
qplot(mcmc.samples[, 'mu'], mcmc.samples[, 'theta'], alpha = I(0,1))
qplot(mcmc.samples)
qplot(x = mcmc.samples[, 'mu'], y = mcmc.samples[, 'theta'], alpha = I(0,1))
qplot(x = mcmc.samples[, 'mu'], y = mcmc.samples[, 'theta'], alpha = I(0.1))
output.samples <- coda.samples(jagsModel, variable.names = c('mu', 'theta'), n.iter = 10000)
coda.sample.data <- coda.samples(jagsModel, variable.names = c('mu', 'theta'), n.iter = 10000); mcmc.samples <- as.matrix(coda.sample.data);
mcmc.samples
qplot(x = mcmc.samples[, 'mu'], y = mcmc.samples[, 'theta'], alpha = I(0.1))
coda.sample.data <- coda.samples(jagsModel, variable.names = c('mu', 'theta'), n.iter = 100000); mcmc.samples <- as.matrix(coda.sample.data);
qplot(x = mcmc.samples[, 'mu'], y = mcmc.samples[, 'theta'], alpha = I(0.1))
qplot(x = mcmc.samples[, 'mu'], y = mcmc.samples[, 'theta'], alpha = I(0.01))
qplot(mcmc.samples[, 'theta'], geom = 'density')
qplot(mcmc.samples[, 'mu'], geom = 'density')
jagsModel <- jags.model('singlemint_singlecoin.jag', data = list(nFlips = length(cointoss10), y = cointoss10), n.chains = 4, n.adapt = 100); update(jagsModel, n.iter = 100);
set.seed(42); jagsModel <- jags.model('singlemint_singlecoin.jag', data = list(nFlips = length(cointoss10), y = cointoss10), n.chains = 4, n.adapt = 100); update(jagsModel, n.iter = 100);
coda.sample.data <- coda.samples(jagsModel, variable.names = c('mu', 'theta'), n.iter = 1000); mcmc.samples <- as.matrix(coda.sample.data);
set.seed(42); jagsModel <- jags.model('singlemint_singlecoin.jag', data = list(nFlips = length(cointoss10), y = cointoss10), n.chains = 4, n.adapt = 100); update(jagsModel, n.iter = 100); coda.sample.data <- coda.samples(jagsModel, variable.names = c('mu', 'theta'), n.iter = 1000); mcmc.samples <- as.matrix(coda.sample.data);
qplot(mcmc.samples[, 'mu'], geom = 'density')
qplot(mcmc.samples[, 'mu'], geom = 'histogram')
qplot(mcmc.samples[, 'mu'], geom = 'bar')
set.seed(42); jagsModel <- jags.model('singlemint_singlecoin.jag', data = list(nFlips = length(cointoss10), y = cointoss10), n.chains = 4, n.adapt = 100); update(jagsModel, n.iter = 100); coda.sample.data <- coda.samples(jagsModel, variable.names = c('mu', 'theta'), n.iter = 10000); mcmc.samples <- as.matrix(coda.sample.data);
qplot(mcmc.samples[, 'mu'], geom = 'histogram')
qplot(mcmc.samples[, 'mu'], geom = 'boxplot')
qplot(mcmc.samples, geom = 'boxplot')
qplot(x = names(mcmc.samples) y = mcmc.samples, geom = 'boxplot')
qplot(x = names(mcmc.samples), y = mcmc.samples, geom = 'boxplot')
melt(mcmc.samples)
library(reshape2)
melt(mcmc.samples)
str(mcmc.samples)
set.seed(42); jagsModel <- jags.model('singlemint_singlecoin.jag', data = list(nFlips = length(cointoss10), y = cointoss10), n.chains = 4, n.adapt = 100); update(jagsModel, n.iter = 100); coda.sample.data <- coda.samples(jagsModel, variable.names = c('mu', 'theta'), n.iter = 100); mcmc.samples <- as.matrix(coda.sample.data);
melt(mcmc.samples)
str(melt(mcmc.samples))
qplot(Var2, value, data = melt(mcmc.samples), geom = 'boxplot')
set.seed(42); jagsPriorModel <- jags.model('singlemint_singlecoin.jag', data = list(nFlips = length(cointoss10)), n.chains = 4, n.adapt = 100); update(jagsModel, n.iter = 100); coda.sample.data <- coda.samples(jagsModel, variable.names = c('mu', 'theta'), n.iter = 100); mcmc.samples <- as.matrix(coda.sample.data);
qplot(Var2, value, data = melt(mcmc.samples), geom = 'boxplot')
prior.df <- melt(mcmc.samples);
set.seed(42); jagsPostModel <- jags.model('singlemint_singlecoin.jag', data = list(nFlips = length(cointoss10), y = cointoss10), n.chains = 4, n.adapt = 100); update(jagsModel, n.iter = 100); coda.sample.data <- coda.samples(jagsModel, variable.names = c('mu', 'theta'), n.iter = 100); mcmc.samples <- as.matrix(coda.sample.data);
post.df <- melt(mcmc.samples)
post.df$Var2
prior.dt <- data.table(prior.df)
library(data.table)
prior.dt <- data.table(prior.df)
prior.dt
prior.dt[, Var2[Var2 == 'mu'] := 'mu.prior']
prior.dt[, Var2 := ifelse(Var2 == 'mu', 'mu.prior', 'theta.prior')]
prior.dt
post.df
post.dt <- data.table(post.df)
post.dt[, Var2 := ifelse(Var2 == 'mu', 'mu.posterior', 'theta.posterior')]
post.dt
rbind(prior.dt, post.dt)
qplot(Var2, value, data = rbind(prior.dt, post.dt), geom = 'boxplot')
set.seed(42); jagsPriorModel <- jags.model('singlemint_singlecoin.jag', data = list(nFlips = length(cointoss10)), n.chains = 4, n.adapt = 100); update(jagsModel, n.iter = 100); coda.sample.data <- coda.samples(jagsModel, variable.names = c('mu', 'theta'), n.iter = 100); mcmc.samples <- as.matrix(coda.sample.data);
qplot(mcmc.samples[, 'mu'], geom = 'density')
set.seed(42); jagsPriorModel <- jags.model('singlemint_singlecoin.jag', data = list(nFlips = length(cointoss10)), n.chains = 4, n.adapt = 100); update(jagsModel, n.iter = 100); coda.sample.data <- coda.samples(jagsModel, variable.names = c('mu', 'theta'), n.iter = 10000); mcmc.samples <- as.matrix(coda.sample.data);
qplot(mcmc.samples[, 'mu'], geom = 'density')
rm(jags.model)
lsos()
rm(jagsModel, jagsPriorModel, jagsPostModel, post.df, prior.dt, prior.df, prior.dt)
lsos()
rm(post.dt)
lsos()
set.seed(42); jagsPriorModel <- jags.model('singlemint_singlecoin.jag', data = list(nFlips = length(cointoss10)), n.chains = 4, n.adapt = 100); update(jagsModel, n.iter = 100); coda.sample.data <- coda.samples(jagsModel, variable.names = c('mu', 'theta'), n.iter = 10000); mcmc.samples <- as.matrix(coda.sample.data);
set.seed(42); jagsPriorModel <- jags.model('singlemint_singlecoin.jag', data = list(nFlips = length(cointoss10)), n.chains = 4, n.adapt = 100); update(jagsPriorModel, n.iter = 100); coda.sample.data <- coda.samples(jagsPriorModel, variable.names = c('mu', 'theta'), n.iter = 10000); mcmc.samples <- as.matrix(coda.sample.data);
qplot(mcmc.samples[, 'mu'], geom = 'density')
set.seed(42); jagsPriorModel <- jags.model('singlemint_singlecoin.jag', data = list(nFlips = length(cointoss10)), n.chains = 4, n.adapt = 100); update(jagsPriorModel, n.iter = 100); coda.sample.data <- coda.samples(jagsPriorModel, variable.names = c('mu', 'theta'), n.iter = 1000); mcmc.samples <- as.matrix(coda.sample.data);
qplot(mcmc.samples[, 'mu'], geom = 'density')
qplot(mcmc.samples[, 'theta'], geom = 'density')
set.seed(42); jagsPriorModel <- jags.model('singlemint_singlecoin.jag', data = list(nFlips = length(cointoss10)), n.chains = 4, n.adapt = 100); update(jagsPriorModel, n.iter = 100); coda.sample.data <- coda.samples(jagsPriorModel, variable.names = c('mu', 'theta'), n.iter = 100000); mcmc.samples <- as.matrix(coda.sample.data);
qplot(mcmc.samples[, 'theta'], geom = 'density')
qplot(mcmc.samples[, 'mu'], geom = 'density')
set.seed(42); jagsPriorModel <- jags.model('singlemint_singlecoin.jag', data = list(nFlips = length(cointoss10)), n.chains = 4, n.adapt = 100); update(jagsPriorModel, n.iter = 100); coda.sample.data <- coda.samples(jagsPriorModel, variable.names = c('mu', 'theta'), n.iter = 100000); mcmc.samples <- as.matrix(coda.sample.data);
qplot(mcmc.samples[, 'mu'], geom = 'density')
qplot(mcmc.samples[, 'theta'], geom = 'density')
set.seed(42); jagsPriorModel <- jags.model('singlemint_singlecoin.jag', data = list(nFlips = length(cointoss10)), n.chains = 4, n.adapt = 100); update(jagsPriorModel, n.iter = 100); coda.sample.data <- coda.samples(jagsPriorModel, variable.names = c('mu', 'theta'), n.iter = 100000); mcmc.samples <- as.matrix(coda.sample.data);
qplot(mcmc.samples[, 'theta'], geom = 'density')
qplot(mcmc.samples[, 'mu'], geom = 'density')
qplot(mcmc.samples[, 'mu'], geom = 'density') + geom_density(mcmc.samples[, 'theta'], colour = 'red')
qplot(mcmc.samples[, 'mu'], geom = 'density') + geom_density(aes(x = mcmc.samples[, 'theta'], colour = 'red'))
qplot(mcmc.samples[, 'mu'], geom = 'density') + geom_density(aes(x = mcmc.samples[, 'theta']), colour = 'red')
mcmc.samples[, 'mu']
set.seed(42); jagsPriorModel <- jags.model('singlemint_singlecoin.jag', data = list(nFlips = length(cointoss10)), n.chains = 4, n.adapt = 100); update(jagsPriorModel, n.iter = 100); coda.sample.data <- coda.samples(jagsPriorModel, variable.names = c('mu', 'theta'), n.iter = 100000); mcmc.prior.samples <- as.matrix(coda.sample.data); jagsPosteriorModel <- jags.model('singlemint_singlecoin.jag', data = list(nFlips = length(use.data), y = use.data), n.chains = 4, n.adapt = 100); update(jagsPosteriorModel, n.iter = 100); coda.sample.data = coda.samples(jagsPosteriorModel, variable.names = c('mu', 'theta'), n.iter = 100000); mcmc.posterior.samples <- as.matrix(coda.sample.data);
qplot(mcmc.prior.samples[, 'mu'], geom = 'density') + geom_density(aes(x = mcmc.prior.samples[, 'theta']), colour = 'red')
qplot(mcmc.prior.samples[, 'mu'], geom = 'density') + geom_density(aes(x = mcmc.prior.samples[, 'theta']), colour = 'red') + geom_density(aes(x = mcmc.posterior.samples[, 'mu']), colour = 'blue') + geom_density(aes(x = mcmc.posterior.samples[, 'theta']), colour = 'green');
set.seed(42); jagsPriorModel <- jags.model('singlemint_singlecoin.jag', data = list(nFlips = length(use.data)), n.chains = 4, n.adapt = 100); update(jagsPriorModel, n.iter = 100); coda.sample.data <- coda.samples(jagsPriorModel, variable.names = c('mu', 'theta'), n.iter = 100000); mcmc.prior.samples <- as.matrix(coda.sample.data); jagsPosteriorModel <- jags.model('singlemint_singlecoin.jag', data = list(nFlips = length(use.data), y = use.data), n.chains = 4, n.adapt = 100); update(jagsPosteriorModel, n.iter = 100); coda.sample.data = coda.samples(jagsPosteriorModel, variable.names = c('mu', 'theta'), n.iter = 100000); mcmc.posterior.samples <- as.matrix(coda.sample.data);
set.seed(42); use.data <- cointoss10; sample.count <- 10000; jagsPriorModel <- jags.model('singlemint_singlecoin.jag', data = list(nFlips = length(use.data)), n.chains = 4, n.adapt = 100); update(jagsPriorModel, n.iter = 100); coda.sample.data <- coda.samples(jagsPriorModel, variable.names = c('mu', 'theta'), n.iter = sample.count); mcmc.prior.samples <- as.matrix(coda.sample.data); jagsPosteriorModel <- jags.model('singlemint_singlecoin.jag', data = list(nFlips = length(use.data), y = use.data), n.chains = 4, n.adapt = 100); update(jagsPosteriorModel, n.iter = 100); coda.sample.data = coda.samples(jagsPosteriorModel, variable.names = c('mu', 'theta'), n.iter = sample.count); mcmc.posterior.samples <- as.matrix(coda.sample.data);
qplot(mcmc.prior.samples[, 'mu'], geom = 'density') + geom_density(aes(x = mcmc.prior.samples[, 'theta']), colour = 'red') + geom_density(aes(x = mcmc.posterior.samples[, 'mu']), colour = 'blue') + geom_density(aes(x = mcmc.posterior.samples[, 'theta']), colour = 'green');
set.seed(42); use.data <- cointoss1000; sample.count <- 10000; jagsPriorModel <- jags.model('singlemint_singlecoin.jag', data = list(nFlips = length(use.data)), n.chains = 4, n.adapt = 100); update(jagsPriorModel, n.iter = 100); coda.sample.data <- coda.samples(jagsPriorModel, variable.names = c('mu', 'theta'), n.iter = sample.count); mcmc.prior.samples <- as.matrix(coda.sample.data); jagsPosteriorModel <- jags.model('singlemint_singlecoin.jag', data = list(nFlips = length(use.data), y = use.data), n.chains = 4, n.adapt = 100); update(jagsPosteriorModel, n.iter = 100); coda.sample.data = coda.samples(jagsPosteriorModel, variable.names = c('mu', 'theta'), n.iter = sample.count); mcmc.posterior.samples <- as.matrix(coda.sample.data);
qplot(mcmc.prior.samples[, 'mu'], geom = 'density') + geom_density(aes(x = mcmc.prior.samples[, 'theta']), colour = 'red') + geom_density(aes(x = mcmc.posterior.samples[, 'mu']), colour = 'blue') + geom_density(aes(x = mcmc.posterior.samples[, 'theta']), colour = 'green');
q()
y
library(rjags)
?rjags.model
rjags::jags.model
?rjags::jags.model
rjags::adapt
?rjags::adapt
?rjags::update
update
?update
?rjags:::update.jags
?rjags::coda.samples
source('sample_rjags_template.R')
lsos()
str(mcmc.prior.samples)
head(mcmc.prior.samples)
qplot(mcmc.prior.samples[, 'mu'], geom = 'density')
library(ggplot2)
qplot(mcmc.prior.samples[, 'mu'], geom = 'density')
qplot(mcmc.prior.samples[, 'mu'], geom = 'histogram')
qplot(mcmc.prior.samples[, 'theta'], geom = 'histogram')
qplot(mcmc.prior.samples[, 'mu'], geom = 'density') + geom_density(aes(x = mcmc.prior.samples[, 'theta']), colour = 'red')
qplot(mcmc.prior.samples[, 'mu'], geom = 'density') + geom_density(aes(x = mcmc.prior.samples[, 'theta']), colour = 'red') + geom_density(aes(x = mcmc.posterior.samples[, 'mu']), colour = 'blue') + geom_density(aes(x = mcmc.posterior.samples[, 'theta']), colour = 'green')
qplot(mcmc.prior.samples[, 'mu'], mcmc.prior.samples[, 'theta'], alpha = I(0.1))
qplot(mcmc.posterior.samples[, 'mu'], mcmc.posterior.samples[, 'theta'], alpha = I(0.1))
qplot(mcmc.prior.samples[, 'mu'], mcmc.prior.samples[, 'theta'], alpha = I(0.1))
qplot(mcmc.prior.samples[, 'mu'], geom = 'boxplot')
qplot(x = 'prior.mu', y = mcmc.prior.samples[, 'mu'], geom = 'boxplot')
qplot(x = I('prior.mu'), y = mcmc.prior.samples[, 'mu'], geom = 'boxplot')
qplot(y = mcmc.prior.samples[, 'mu'], geom = 'boxplot')
qplot(x = 'Prior Mu', y = mcmc.prior.samples[, 'mu'], geom = 'boxplot')
qplot(x = 'Prior Mu', y = mcmc.prior.samples[, 'mu'], geom = 'boxplot') + geom_boxplot(aes(x = 'Prior Theta', y = mcmc.prior.samples[, 'theta']))
qplot(x = 'Prior Mu', y = mcmc.prior.samples[, 'mu'], geom = 'boxplot') + geom_boxplot(aes(x = 'Prior Theta', y = mcmc.prior.samples[, 'theta'])) + geom_boxplot(aes(x = 'Posterior Mu', y = mcmc.posterior.samples[, 'mu']))
qplot(x = 'Prior Mu', y = mcmc.prior.samples[, 'mu'], geom = 'boxplot') + geom_boxplot(aes(x = 'Prior Theta', y = mcmc.prior.samples[, 'theta'])) + geom_boxplot(aes(x = 'Posterior Mu', y = mcmc.posterior.samples[, 'mu'])) + geom_boxplot(aes(x = 'Posterior Theta', y = mcmc.posterior.samples[, 'theta']))
qplot(x = 'Prior Mu', y = mcmc.prior.samples[, 'mu'], geom = 'boxplot', xlab = 'Variable', ylab = 'Probability') + geom_boxplot(aes(x = 'Prior Theta', y = mcmc.prior.samples[, 'theta'])) + geom_boxplot(aes(x = 'Posterior Mu', y = mcmc.posterior.samples[, 'mu'])) + geom_boxplot(aes(x = 'Posterior Theta', y = mcmc.posterior.samples[, 'theta']))
qplot(x = 'Mu Prior', y = mcmc.prior.samples[, 'mu'], geom = 'boxplot', xlab = 'Variable', ylab = 'Probability') + geom_boxplot(aes(x = 'Theta Prior', y = mcmc.prior.samples[, 'theta'])) + geom_boxplot(aes(x = 'Mu Posterior', y = mcmc.posterior.samples[, 'mu'])) + geom_boxplot(aes(x = 'Theta Posterior', y = mcmc.posterior.samples[, 'theta']))
source('sample_rjags_template.R')
source('sample_rjags_template.R')
lsos()
mcmc.prior.samples
qplot(mcmc.prior.samples[, 'theta'], geom = 'density')
qplot(mcmc.posterior.samples[, 'theta'], geom = 'density')
set.seed(42);
use.data <- cointoss10;
sample.count <- 10000;
chain.count  <- 5;
adapt.steps  <- 500;
burnin.steps <- 1000;
jagsPriorModel <- jags.model('test.jag', data = list(nFlips = length(use.data)), n.chains = chain.count, n.adapt = adapt.steps);
update(jagsPriorModel, n.iter = burnin.steps)
coda.sample.data <- coda.samples(jagsPriorModel, variable.names = c('mu', 'theta'), n.iter = sample.count);
mcmc.prior.samples <- as.matrix(coda.sample.data)
qplot(mcmc.prior.samples[, 'theta'], geom = 'density')
qplot(x = 'Mu Prior', y = mcmc.prior.samples[, 'mu'], geom = 'boxplot', xlab = 'Variable', ylab = 'Probability') + geom_boxplot(aes(x = 'Theta Prior', y = mcmc.prior.samples[, 'theta']))
jagsPosteriorModel <- jags.model('test.jag', data = list(nFlips = length(use.data), y = use.data), n.chains = chain.count, n.adapt = adapt.steps);
update(jagsPosteriorModel, n.iter = burnin.steps)
coda.sample.data <- coda.samples(jagsPosteriorModel, variable.names = c('mu', 'theta'), n.iter = sample.count);
mcmc.posterior.samples <- as.matrix(coda.sample.data)
qplot(x = 'Mu Prior', y = mcmc.prior.samples[, 'mu'], geom = 'boxplot', xlab = 'Variable', ylab = 'Probability') + geom_boxplot(aes(x = 'Theta Prior', y = mcmc.prior.samples[, 'theta'])) + geom_boxplot(aes(x = 'Mu Posterior', y = mcmc.posterior.samples[, 'mu'])) + geom_boxplot(aes(x = 'Theta Posterior', y = mcmc.posterior.samples[, 'theta']))
lsos()
jagsPriorModel <- jags.model('test.jag', data = list(nFlips = length(use.data)), n.chains = chain.count, n.adapt = adapt.steps); update(jagsPriorModel, n.iter = burnin.steps)
jagsPriorModel <- jags.model('test.jag', data = list(nFlips = length(use.data)), n.chains = chain.count, n.adapt = adapt.steps); update(jagsPriorModel, n.iter = burnin.steps)
jagsPriorModel <- jags.model('test.jag', data = list(nFlips = length(use.data)), n.chains = chain.count, n.adapt = adapt.steps); update(jagsPriorModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jagsPriorModel, variable.names = c('mu', 'theta'), n.iter = sample.count); mcmc.prior.samples <- as.matrix(coda.sample.data);
qplot(mcmc.prior.samples[, 'mu'], geom = 'density')
qplot(mcmc.prior.samples[, 'theta'], geom = 'density')
jagsPostModel <- jags.model('test.jag', data = list(nFlips = length(use.data), y = use.data), n.chains = chain.count, n.adapt = adapt.steps); update(jagsPostModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jagsPostModel, variable.names = c('mu', 'theta'), n.iter = sample.count); mcmc.post.samples <- as.matrix(coda.sample.data);
qplot(mcmc.post.samples[, 'theta'], geom = 'density')
qplot(mcmc.post.samples[, 'mu'], geom = 'density')
qplot(mcmc.prior.samples[, 'mu'], geom = 'density') + geom_density(aes(x = mcmc.post.samples[, 'mu']), colour = 'red')
qplot(mcmc.prior.samples[, 'theta'], geom = 'density') + geom_density(aes(x = mcmc.post.samples[, 'theta']), colour = 'red')
adapt.steps
burnin.steps
lsos()
lsos(n = 50)
sample.count
sample.count <- 100000
jagsPriorModel <- jags.model('test.jag', data = list(nFlips = length(use.data)), n.chains = chain.count, n.adapt = adapt.steps); update(jagsPriorModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jagsPriorModel, variable.names = c('mu', 'theta'), n.iter = sample.count); mcmc.prior.samples <- as.matrix(coda.sample.data);
jagsPostModel <- jags.model('test.jag', data = list(nFlips = length(use.data), y = use.data), n.chains = chain.count, n.adapt = adapt.steps); update(jagsPostModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jagsPostModel, variable.names = c('mu', 'theta'), n.iter = sample.count); mcmc.post.samples <- as.matrix(coda.sample.data);
qplot(mcmc.prior.samples[, 'mu'], geom = 'density') + geom_density(aes(x = mcmc.post.samples[, 'mu']), colour = 'red')
qplot(mcmc.prior.samples[, 'theta'], geom = 'density') + geom_density(aes(x = mcmc.post.samples[, 'theta']), colour = 'red')
qplot(mcmc.prior.samples[, 'mu'], geom = 'density') + geom_density(aes(x = mcmc.post.samples[, 'mu']), colour = 'red') + geom_density(aes(x = mcmc.prior.samples[, 'theta']), colour = 'green') + geom_density(aes(x = mcmc.post.samples[, 'theta']), colour = 'blue')
jagsPriorModel <- jags.model('test.jag', data = list(nFlips = length(use.data)), n.chains = chain.count, n.adapt = adapt.steps); update(jagsPriorModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jagsPriorModel, variable.names = c('mu', 'theta'), n.iter = sample.count); mcmc.prior.samples <- as.matrix(coda.sample.data);
jagsPostModel <- jags.model('test.jag', data = list(nFlips = length(use.data), y = use.data), n.chains = chain.count, n.adapt = adapt.steps); update(jagsPostModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jagsPostModel, variable.names = c('mu', 'theta'), n.iter = sample.count); mcmc.post.samples <- as.matrix(coda.sample.data);
qplot(mcmc.prior.samples[, 'mu'], geom = 'density') + geom_density(aes(x = mcmc.post.samples[, 'mu']), colour = 'red') + geom_density(aes(x = mcmc.prior.samples[, 'theta']), colour = 'green') + geom_density(aes(x = mcmc.post.samples[, 'theta']), colour = 'blue')
jagsPriorModel <- jags.model('test.jag', data = list(nFlips = length(use.data)), n.chains = chain.count, n.adapt = adapt.steps); update(jagsPriorModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jagsPriorModel, variable.names = c('mu', 'theta'), n.iter = sample.count); mcmc.prior.samples <- as.matrix(coda.sample.data);
jagsPriorModel <- jags.model('test.jag', data = list(nFlips = length(use.data)), n.chains = chain.count, n.adapt = adapt.steps); update(jagsPriorModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jagsPriorModel, variable.names = c('mu', 'theta'), n.iter = sample.count); mcmc.prior.samples <- as.matrix(coda.sample.data);
jagsPostModel <- jags.model('test.jag', data = list(nFlips = length(use.data), y = use.data), n.chains = chain.count, n.adapt = adapt.steps); update(jagsPostModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jagsPostModel, variable.names = c('mu', 'theta'), n.iter = sample.count); mcmc.post.samples <- as.matrix(coda.sample.data);
qplot(mcmc.prior.samples[, 'mu'], geom = 'density') + geom_density(aes(x = mcmc.post.samples[, 'mu']), colour = 'red') + geom_density(aes(x = mcmc.prior.samples[, 'theta']), colour = 'green') + geom_density(aes(x = mcmc.post.samples[, 'theta']), colour = 'blue')
rbinom(20)
?rbinom
rbinom(20, 1, 0.4)
rbinom(30, 1, 0.4)
c(rbinom(20, 1, 0.4), rbinom(50, 1, 0.6))
rbind(c(rep(1, 20), rep(2, 50)), c(rbinom(20, 1, 0.4), rbinom(50, 1, 0.6)))
jagsPostModel <- jags.model('test.jag', data = list(nFlips = length(use.data), y = use.data), n.chains = chain.count, n.adapt = adapt.steps); update(jagsPostModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jagsPostModel, variable.names = c('mu', 'theta'), n.iter = sample.count); mcmc.post.samples <- as.matrix(coda.sample.data);
rbind(c(rep(1, 20), rep(2, 50)), c(rbinom(20, 1, 0.4), rbinom(50, 1, 0.6)))
saveRDS(rbind(c(rep(1, 20), rep(2, 50)), c(rbinom(20, 1, 0.4), rbinom(50, 1, 0.6))), 'singlemint_twocoin.rds')
twocoin <- rbind(c(rep(1, 20), rep(2, 50)), c(rbinom(20, 1, 0.4), rbinom(50, 1, 0.6)))
dim(twocoin)
use.data <- twocoin; jagsPostModel <- jags.model('singlemint_twocoin.jag', data = list(nTrialTotal = dim(use.data)[2], coin = use.data[1, ], y = use.data[2, ]), n.chains = chain.count, n.adapt = adapt.steps); update(jagsPostModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jagsPostModel, variable.names = c('mu', 'theta'), n.iter = sample.count); mcmc.post.samples <- as.matrix(coda.sample.data);
use.data <- twocoin; jagsPostModel <- jags.model('singlemint_twocoin.jag', data = list(nTrialTotal = dim(use.data)[2], nCoins = max(use.data[1, ]), coin = use.data[1, ], y = use.data[2, ]), n.chains = chain.count, n.adapt = adapt.steps); update(jagsPostModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jagsPostModel, variable.names = c('mu', 'theta'), n.iter = sample.count); mcmc.post.samples <- as.matrix(coda.sample.data);
mcmc.post.samples
str(mcmc.post.samples)
qplot(mcmc.post.samples[, 'theta[1]'], mcmc.post.samples[, 'theta[2]'], geom = 'point')
qplot(mcmc.post.samples[, 'theta[1]'], mcmc.post.samples[, 'theta[2]'], geom = 'point', alpha = I(0.1))
qplot(mcmc.post.samples[, 'theta[1]'], mcmc.post.samples[, 'theta[2]'], geom = 'point', alpha = I(0.01))
qplot(mcmc.post.samples[, 'theta[1]'], geom = 'density')
qplot(mcmc.post.samples[, 'theta[2]'], geom = 'density')
qplot(mcmc.post.samples[, 'mu'], geom = 'density')
use.data <- twocoin; jagsPriorModel <- jags.model('singlemint_twocoin.jag', data = list(nTrialTotal = dim(use.data)[2], nCoins = max(use.data[1, ]), coin = use.data[1, ]), n.chains = chain.count, n.adapt = adapt.steps); update(jagsPriorModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jagsPriorModel, variable.names = c('mu', 'theta'), n.iter = sample.count); mcmc.prior.samples <- as.matrix(coda.sample.data);
qplot(mcmc.prior.samples[, 'mu'], geom = 'density')
qplot(mcmc.prior.samples[, 'theta[1]'], geom = 'density')
qplot(mcmc.prior.samples[, 'theta[2]'], geom = 'density')
qplot(mcmc.prior.samples[, 'theta[1]'], geom = 'density') + geom_density(aes(x = mcmc.prior.samples[, 'theta[2]']), colour = 'red')
qplot(mcmc.prior.samples[, 'theta[1]'], geom = 'density') + geom_density(aes(x = mcmc.post.samples[, 'theta[1]']), colour = 'red')
qplot(mcmc.prior.samples[, 'theta[2]'], geom = 'density') + geom_density(aes(x = mcmc.post.samples[, 'theta[2]']), colour = 'red')
qplot(mcmc.prior.samples[, 'theta[1]'], geom = 'density') + geom_density(aes(x = mcmc.post.samples[, 'theta[1]']), colour = 'red')
qplot(mcmc.prior.samples[, 'mu'], geom = 'density') + geom_density(aes(x = mcmc.post.samples[, 'mu']), colour = 'red')
use.data <- twocoin; jagsPriorModel <- jags.model('singlemint_twocoin.jag', data = list(nTrialTotal = dim(use.data)[2], nCoins = max(use.data[1, ]), coin = use.data[1, ]), n.chains = chain.count, n.adapt = adapt.steps); update(jagsPriorModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jagsPriorModel, variable.names = c('mu', 'theta'), n.iter = sample.count); mcmc.prior.samples <- as.matrix(coda.sample.data);
use.data <- twocoin; jagsPostModel <- jags.model('singlemint_twocoin.jag', data = list(nTrialTotal = dim(use.data)[2], nCoins = max(use.data[1, ]), coin = use.data[1, ], y = use.data[2, ]), n.chains = chain.count, n.adapt = adapt.steps); update(jagsPostModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jagsPostModel, variable.names = c('mu', 'theta'), n.iter = sample.count); mcmc.post.samples <- as.matrix(coda.sample.data);
qplot(mcmc.prior.samples[, 'mu'], geom = 'density') + geom_density(aes(x = mcmc.post.samples[, 'mu']), colour = 'red')
qplot(mcmc.prior.samples[, 'theta[1]'], geom = 'density') + geom_density(aes(x = mcmc.post.samples[, 'theta[1]']), colour = 'red')
lsos()
rm(jagsPost, jagsPriorModel, jagsPosteriorModel)
rm(jagsPostModel)
lsos()
use.data <- twocoin; jagsPostModel <- jags.model('singlemint_twocoin.jag', data = list(nTrialTotal = dim(use.data)[2], nCoins = max(use.data[1, ]), coin = use.data[1, ], y = use.data[2, ]), n.chains = chain.count, n.adapt = adapt.steps); update(jagsPostModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jagsPostModel, variable.names = c('mu', 'theta'), n.iter = sample.count); mcmc.post.samples <- as.matrix(coda.sample.data);
use.data <- twocoin; jagsPriorModel <- jags.model('singlemint_twocoin.jag', data = list(nTrialTotal = dim(use.data)[2], nCoins = max(use.data[1, ]), coin = use.data[1, ]), n.chains = chain.count, n.adapt = adapt.steps); update(jagsPriorModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jagsPriorModel, variable.names = c('mu', 'theta'), n.iter = sample.count); mcmc.prior.samples <- as.matrix(coda.sample.data);
qplot(mcmc.prior.samples[, 'theta[1]'], geom = 'density') + geom_density(aes(x = mcmc.post.samples[, 'theta[1]']), colour = 'red')
qplot(mcmc.prior.samples[, 'theta[2]'], geom = 'density') + geom_density(aes(x = mcmc.post.samples[, 'theta[2]']), colour = 'red')
qplot(mcmc.prior.samples[, 'mu'], geom = 'density') + geom_density(aes(x = mcmc.post.samples[, 'mu']), colour = 'red')
qplot(mcmc.prior.samples[, 'theta[1]'], mcmc.prior.samples[, 'mu'], geom = 'point')
qplot(mcmc.prior.samples[, 'theta[1]'], mcmc.prior.samples[, 'mu'], geom = 'point', alpha = I(0.01))
qplot(mcmc.prior.samples[, 'mu'], mcmc.prior.samples[, 'theta[1]'], geom = 'point', alpha = I(0.01))
qplot(mcmc.prior.samples[, 'theta[1]'], mcmc.prior.samples[, 'mu'], geom = 'point', alpha = I(0.01))
qplot(mcmc.prior.samples[, 'theta[2]'], mcmc.prior.samples[, 'mu'], geom = 'point', alpha = I(0.01))
qplot(mcmc.prior.samples[, 'theta[2]'], mcmc.prior.samples[, 'mu'], geom = 'density2d')
qplot(mcmc.prior.samples[, 'theta[1]'], mcmc.prior.samples[, 'mu'], geom = 'density2d')
qplot(mcmc.post.samples[, 'theta[1]'], mcmc.post.samples[, 'mu'], geom = 'density2d')
qplot(mcmc.post.samples[, 'theta[1]'], mcmc.post.samples[, 'mu'], geom = 'density2d', xlim = c(0, 1), ylim = c(0, 1))
sample.count
sample.count <- 1000
use.data <- twocoin; jagsPriorModel <- jags.model('singlemint_twocoin.jag', data = list(nTrialTotal = dim(use.data)[2], nCoins = max(use.data[1, ]), coin = use.data[1, ]), n.chains = chain.count, n.adapt = adapt.steps); update(jagsPriorModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jagsPriorModel, variable.names = c('mu', 'theta'), n.iter = sample.count); mcmc.prior.samples <- as.matrix(coda.sample.data);
use.data <- twocoin; jagsPostModel <- jags.model('singlemint_twocoin.jag', data = list(nTrialTotal = dim(use.data)[2], nCoins = max(use.data[1, ]), coin = use.data[1, ], y = use.data[2, ]), n.chains = chain.count, n.adapt = adapt.steps); update(jagsPostModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jagsPostModel, variable.names = c('mu', 'theta'), n.iter = sample.count); mcmc.post.samples <- as.matrix(coda.sample.data);
qplot(mcmc.post.samples[, 'theta[1]'], mcmc.post.samples[, 'mu'], geom = 'density2d', xlim = c(0, 1), ylim = c(0, 1))
qplot(mcmc.post.samples[, 'theta[2]'], mcmc.post.samples[, 'mu'], geom = 'density2d', xlim = c(0, 1), ylim = c(0, 1))
qplot(mcmc.post.samples[, 'theta[1]'], mcmc.post.samples[, 'theta[2]'], geom = 'density2d', xlim = c(0, 1), ylim = c(0, 1))
qplot(mcmc.prior.samples[, 'theta[1]'], mcmc.prior.samples[, 'theta[2]'], geom = 'density2d', xlim = c(0, 1), ylim = c(0, 1))
sample.count <- 2500
use.data <- twocoin; jagsPriorModel <- jags.model('singlemint_twocoin.jag', data = list(nTrialTotal = dim(use.data)[2], nCoins = max(use.data[1, ]), coin = use.data[1, ]), n.chains = chain.count, n.adapt = adapt.steps); update(jagsPriorModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jagsPriorModel, variable.names = c('mu', 'theta'), n.iter = sample.count); mcmc.prior.samples <- as.matrix(coda.sample.data); jagsPostModel <- jags.model('singlemint_twocoin.jag', data = list(nTrialTotal = dim(use.data)[2], nCoins = max(use.data[1, ]), coin = use.data[1, ], y = use.data[2, ]), n.chains = chain.count, n.adapt = adapt.steps); update(jagsPostModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jagsPostModel, variable.names = c('mu', 'theta'), n.iter = sample.count); mcmc.post.samples <- as.matrix(coda.sample.data);
qplot(mcmc.prior.samples[, 'theta[1]'], mcmc.prior.samples[, 'theta[2]'], geom = 'density2d', xlim = c(0, 1), ylim = c(0, 1))
qplot(mcmc.prior.samples[, 'theta[1]'], mcmc.prior.samples[, 'mu'], geom = 'density2d', xlim = c(0, 1), ylim = c(0, 1))
qplot(mcmc.post.samples[, 'theta[1]'], mcmc.post.samples[, 'theta[2]'], geom = 'density2d', xlim = c(0, 1), ylim = c(0, 1))
qplot(mcmc.post.samples[, 'theta[1]'], mcmc.post.samples[, 'mu'], geom = 'density2d', xlim = c(0, 1), ylim = c(0, 1))
qplot(mcmc.post.samples[, 'mu'], geom = 'density')
qplot(mcmc.post.samples[, 'theta[1]'], geom = 'density')
qplot(mcmc.post.samples[, 'theta[2]'], geom = 'density')
qplot(mcmc.post.samples[, 'theta[1]'], geom = 'density')
qplot(mcmc.post.samples[, 'theta[1]'], geom = 'density', xlim = c(0, 1))
qplot(mcmc.post.samples[, 'theta[2]'], geom = 'density', xlim = c(0, 1))
qplot(mcmc.post.samples[, 'theta[2]'], geom = 'density', xlim = c(0, 1)) + geom_density(aes(x = mcmc.post.samples[, 'mu']), colour = 'red')
qplot(mcmc.post.samples[, 'theta[1]'], geom = 'density', xlim = c(0, 1)) + geom_density(aes(x = mcmc.post.samples[, 'mu']), colour = 'red')
qplot(mcmc.post.samples[, 'theta[1]'], geom = 'density', xlim = c(0, 1)) + geom_density(aes(x = mcmc.post.samples[, 'theta[2]']), colour = 'blue') + geom_density(aes(x = mcmc.post.samples[, 'mu']), colour = 'red')
qplot(mcmc.post.samples[, 'theta[1]'], geom = 'density', xlim = c(0, 1), colour = I('red')) + geom_density(aes(x = mcmc.post.samples[, 'theta[2]']), colour = 'blue') + geom_density(aes(x = mcmc.post.samples[, 'mu']), colour = 'black')
key <- 'theta[1]'; qplot(mcmc.prior.samples[, key], geom = 'density', xlim = c(0, 1)) + geom_density(aes(x = mcmc.post.samples[, key]), colour = 'red')
key <- 'theta[2]'; qplot(mcmc.prior.samples[, key], geom = 'density', xlim = c(0, 1)) + geom_density(aes(x = mcmc.post.samples[, key]), colour = 'red')
key <- 'mu'; qplot(mcmc.prior.samples[, key], geom = 'density', xlim = c(0, 1)) + geom_density(aes(x = mcmc.post.samples[, key]), colour = 'red')
use.data <- twocoin; jagsPriorModel <- jags.model('singlemint_twocoin.jag', data = list(nTrialTotal = dim(use.data)[2], nCoins = max(use.data[1, ]), coin = use.data[1, ]), n.chains = chain.count, n.adapt = adapt.steps); update(jagsPriorModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jagsPriorModel, variable.names = c('mu', 'theta'), n.iter = sample.count); mcmc.prior.samples <- as.matrix(coda.sample.data); jagsPostModel <- jags.model('singlemint_twocoin.jag', data = list(nTrialTotal = dim(use.data)[2], nCoins = max(use.data[1, ]), coin = use.data[1, ], y = use.data[2, ]), n.chains = chain.count, n.adapt = adapt.steps); update(jagsPostModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jagsPostModel, variable.names = c('mu', 'theta'), n.iter = sample.count); mcmc.post.samples <- as.matrix(coda.sample.data);
key <- 'mu'; qplot(mcmc.prior.samples[, key], geom = 'density', xlim = c(0, 1)) + geom_density(aes(x = mcmc.post.samples[, key]), colour = 'red')
key <- 'theta[1]'; qplot(mcmc.prior.samples[, key], geom = 'density', xlim = c(0, 1)) + geom_density(aes(x = mcmc.post.samples[, key]), colour = 'red')
use.data <- twocoin; jagsPriorModel <- jags.model('singlemint_twocoin.jag', data = list(nTrialTotal = dim(use.data)[2], nCoins = max(use.data[1, ]), coin = use.data[1, ]), n.chains = chain.count, n.adapt = adapt.steps); update(jagsPriorModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jagsPriorModel, variable.names = c('mu', 'theta'), n.iter = sample.count); mcmc.prior.samples <- as.matrix(coda.sample.data); jagsPostModel <- jags.model('singlemint_twocoin.jag', data = list(nTrialTotal = dim(use.data)[2], nCoins = max(use.data[1, ]), coin = use.data[1, ], y = use.data[2, ]), n.chains = chain.count, n.adapt = adapt.steps); update(jagsPostModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jagsPostModel, variable.names = c('mu', 'theta'), n.iter = sample.count); mcmc.post.samples <- as.matrix(coda.sample.data);
use.data <- twocoin; jagsPriorModel <- jags.model('singlemint_twocoin.jag', data = list(nTrialTotal = dim(use.data)[2], nCoins = max(use.data[1, ]), coin = use.data[1, ]), n.chains = chain.count, n.adapt = adapt.steps); update(jagsPriorModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jagsPriorModel, variable.names = c('mu', 'theta'), n.iter = sample.count); mcmc.prior.samples <- as.matrix(coda.sample.data); jagsPostModel <- jags.model('singlemint_twocoin.jag', data = list(nTrialTotal = dim(use.data)[2], nCoins = max(use.data[1, ]), coin = use.data[1, ], y = use.data[2, ]), n.chains = chain.count, n.adapt = adapt.steps); update(jagsPostModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jagsPostModel, variable.names = c('mu', 'theta'), n.iter = sample.count); mcmc.post.samples <- as.matrix(coda.sample.data);
key <- 'theta[1]'; qplot(mcmc.prior.samples[, key], geom = 'density', xlim = c(0, 1)) + geom_density(aes(x = mcmc.post.samples[, key]), colour = 'red')
key <- 'mu'; qplot(mcmc.prior.samples[, key], geom = 'density', xlim = c(0, 1)) + geom_density(aes(x = mcmc.post.samples[, key]), colour = 'red')
use.data <- twocoin; jagsPriorModel <- jags.model('singlemint_twocoin.jag', data = list(nTrialTotal = dim(use.data)[2], nCoins = max(use.data[1, ]), coin = use.data[1, ]), n.chains = chain.count, n.adapt = adapt.steps); update(jagsPriorModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jagsPriorModel, variable.names = c('mu', 'theta'), n.iter = sample.count); mcmc.prior.samples <- as.matrix(coda.sample.data); jagsPostModel <- jags.model('singlemint_twocoin.jag', data = list(nTrialTotal = dim(use.data)[2], nCoins = max(use.data[1, ]), coin = use.data[1, ], y = use.data[2, ]), n.chains = chain.count, n.adapt = adapt.steps); update(jagsPostModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jagsPostModel, variable.names = c('mu', 'theta'), n.iter = sample.count); mcmc.post.samples <- as.matrix(coda.sample.data);
key <- 'mu'; qplot(mcmc.prior.samples[, key], geom = 'density', xlim = c(0, 1)) + geom_density(aes(x = mcmc.post.samples[, key]), colour = 'red')
key <- 'theta[1]'; qplot(mcmc.prior.samples[, key], geom = 'density', xlim = c(0, 1)) + geom_density(aes(x = mcmc.post.samples[, key]), colour = 'red')
key <- 'theta[2]'; qplot(mcmc.prior.samples[, key], geom = 'density', xlim = c(0, 1)) + geom_density(aes(x = mcmc.post.samples[, key]), colour = 'red')
qplot(mcmc.post.samples[, 'theta[1]'], geom = 'density', xlim = c(0, 1), colour = I('red')) + geom_density(aes(x = mcmc.post.samples[, 'theta[2]']), colour = 'blue') + geom_density(aes(x = mcmc.post.samples[, 'mu']), colour = 'black')
use.data <- twocoin; jagsPriorModel <- jags.model('singlemint_twocoin.jag', data = list(nTrialTotal = dim(use.data)[2], nCoins = max(use.data[1, ]), coin = use.data[1, ]), n.chains = chain.count, n.adapt = adapt.steps); update(jagsPriorModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jagsPriorModel, variable.names = c('mu', 'theta'), n.iter = sample.count); mcmc.prior.samples <- as.matrix(coda.sample.data); jagsPostModel <- jags.model('singlemint_twocoin.jag', data = list(nTrialTotal = dim(use.data)[2], nCoins = max(use.data[1, ]), coin = use.data[1, ], y = use.data[2, ]), n.chains = chain.count, n.adapt = adapt.steps); update(jagsPostModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jagsPostModel, variable.names = c('mu', 'theta'), n.iter = sample.count); mcmc.post.samples <- as.matrix(coda.sample.data);
qplot(mcmc.post.samples[, 'theta[1]'], geom = 'density', xlim = c(0, 1), colour = I('red')) + geom_density(aes(x = mcmc.post.samples[, 'theta[2]']), colour = 'blue') + geom_density(aes(x = mcmc.post.samples[, 'mu']), colour = 'black')
qplot(mcmc.prior.samples[, 'theta[1]'], mcmc.prior.samples[, 'theta[2]'], geom = 'density2d', xlim = c(0, 1), ylim = c(0, 1))
use.data <- twocoin; jagsPriorModel <- jags.model('singlemint_twocoin.jag', data = list(nTrialTotal = dim(use.data)[2], nCoins = max(use.data[1, ]), coin = use.data[1, ]), n.chains = chain.count, n.adapt = adapt.steps); update(jagsPriorModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jagsPriorModel, variable.names = c('mu', 'theta'), n.iter = sample.count); mcmc.prior.samples <- as.matrix(coda.sample.data); jagsPostModel <- jags.model('singlemint_twocoin.jag', data = list(nTrialTotal = dim(use.data)[2], nCoins = max(use.data[1, ]), coin = use.data[1, ], y = use.data[2, ]), n.chains = chain.count, n.adapt = adapt.steps); update(jagsPostModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jagsPostModel, variable.names = c('mu', 'theta'), n.iter = sample.count); mcmc.post.samples <- as.matrix(coda.sample.data);
qplot(mcmc.prior.samples[, 'theta[1]'], mcmc.prior.samples[, 'theta[2]'], geom = 'density2d', xlim = c(0, 1), ylim = c(0, 1))
use.data <- twocoin; jagsPriorModel <- jags.model('singlemint_twocoin.jag', data = list(nTrialTotal = dim(use.data)[2], nCoins = max(use.data[1, ]), coin = use.data[1, ]), n.chains = chain.count, n.adapt = adapt.steps); update(jagsPriorModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jagsPriorModel, variable.names = c('mu', 'theta'), n.iter = sample.count); mcmc.prior.samples <- as.matrix(coda.sample.data); jagsPostModel <- jags.model('singlemint_twocoin.jag', data = list(nTrialTotal = dim(use.data)[2], nCoins = max(use.data[1, ]), coin = use.data[1, ], y = use.data[2, ]), n.chains = chain.count, n.adapt = adapt.steps); update(jagsPostModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jagsPostModel, variable.names = c('mu', 'theta'), n.iter = sample.count); mcmc.post.samples <- as.matrix(coda.sample.data);
qplot(mcmc.prior.samples[, 'theta[1]'], mcmc.prior.samples[, 'theta[2]'], geom = 'density2d', xlim = c(0, 1), ylim = c(0, 1))
qplot(mcmc.post.samples[, 'theta[1]'], mcmc.post.samples[, 'theta[2]'], geom = 'density2d', xlim = c(0, 1), ylim = c(0, 1))
pow(10, 2)
use.data <- twocoin, jagsFull <- jags.model('singlemint_full.jag', data = list(nTrialTotal = dim(use.data)[2], nCoins = max(use.data[1, ]), coin = use.data[1, ], y = use.data[2, ]), n.chains = chain.count, n.adapt = adapt.steps); update(jagsFull, n.iter = burnin.steps); coda.sample.data <- coda.samples(jagsFull, variable.names = c('mu', 'theta', 'K'), n.iter = sample.count); mcmc.full.samples <- as.matrix(coda.sample.data);
use.data <- twocoin; jagsFull <- jags.model('singlemint_full.jag', data = list(nTrialTotal = dim(use.data)[2], nCoins = max(use.data[1, ]), coin = use.data[1, ], y = use.data[2, ]), n.chains = chain.count, n.adapt = adapt.steps); update(jagsFull, n.iter = burnin.steps); coda.sample.data <- coda.samples(jagsFull, variable.names = c('mu', 'theta', 'K'), n.iter = sample.count); mcmc.full.samples <- as.matrix(coda.sample.data);
use.data <- twocoin; jagsFull <- jags.model('singlemint_full.jag', data = list(nTrialTotal = dim(use.data)[2], nCoins = max(use.data[1, ]), coin = use.data[1, ], y = use.data[2, ]), n.chains = chain.count, n.adapt = adapt.steps); update(jagsFull, n.iter = burnin.steps); coda.sample.data <- coda.samples(jagsFull, variable.names = c('mu', 'theta', 'kappa'), n.iter = sample.count); mcmc.full.samples <- as.matrix(coda.sample.data);
qplot(mcmc.full.samples[, 'kappa'], geom = 'density')
qplot(mcmc.full.samples[, 'mu'], geom = 'density')
qplot(mcmc.full.samples[, 'mu'], mcmc.full.samples[, 'kappa'], geom = 'density2d')
qplot(mcmc.full.samples[, 'theta[1]'], mcmc.full.samples[, 'kappa'], geom = 'density2d')
qplot(mcmc.full.samples[, 'theta[1]'], mcmc.full.samples[, 'kappa'], geom = 'density2d', xlim = c(0, 1))
qplot(mcmc.full.samples[, 'theta[1]'], mcmc.full.samples[, 'theta[2]'], geom = 'density2d', xlim = c(0, 1))
qplot(mcmc.full.samples[, 'theta[1]'], mcmc.full.samples[, 'theta[2]'], geom = 'density2d', xlim = c(0, 1), ylim = c(0, 1))
q()
y
q()
y
source('helper_functions.R', echo = TRUE)
lsos()
mu.grid
mu.grid <- seq(0, 1, by = 0.2)
mu.grid <- seq(0, 1, by = 0.001)
theta.grid
mu.grid <- theta.grid
mu.test <- seq(0, 1, by = 0.2)
theta.test <- seq(0, 1, by = 0.1)
calculate.p.y.given.theta(cointoss10, mu.test, theta.test)
dim(calculate.p.y.given.theta(cointoss10, mu.test, theta.test))
theta.test <- seq(0, 1, length.out = 10)
mu.test <- seq(0, 1, length.out = 5)
dim(calculate.p.y.given.theta(cointoss10, mu.test, theta.test))
calculate.p.theta.given.mu
calculate.p.theta.given.mu(mu.test, theta.test, K = 10)
dim(calculate.p.theta.given.mu(mu.test, theta.test, K = 10))
calculate.mu.prior
calculate.mu.prior(mu.test, theta.test)
dim(calculate.mu.prior(mu.test, theta.test))
source('helper_functions.R')
dim(calculate.mu.prior(mu.test, theta.test))
lsos()
rm(mu.test, theta.test)
lsos()
rm(use.data)
rm(twocoin)
lsos()
mu.prior
lsos()
rm(list = ls())
source('helper_functions.R')
lsos()
lsos(n = 30)
coin1 <- rbinom(20, 1, 0.45)
coin2 <- rbinom(50, 1, 0.40)
coin2 <- rbinom(20, 1, 0.80)
coin2 <- rbinom(50, 1, 0.40)
coin3 <- rbinom(20, 1, 0.80)
coin4 <- rbinom(30, 1, 0.50)
coin5 <- rbinom(30, 1, 0.45)
singlemint.multiplecoins <- rbind(coin = c(rep(1, length(coin1)), rep(2, length(coin2)), rep(3, length(coin3)), rep(4, length(coin4)), rep(5, length(coin5))), toss = c(coin1, coin2, coin3, coin4, coin5))
singlemint.multiplecoins
set.seed(42);
use.data <- cointoss10;
sample.count <- 10000;
chain.count  <- 5;
adapt.steps  <- 500;
burnin.steps <- 1000;
jagsPriorModel <- jags.model('singlemint_full.jag', data = list(nFlips = length(use.data)), n.chains = chain.count, n.adapt = adapt.steps);
update(jagsPriorModel, n.iter = burnin.steps);
coda.sample.data <- coda.samples(jagsPriorModel, variable.names = c('theta'), n.iter = sample.count);
mcmc.prior.samples <- as.matrix(coda.sample.data);
library(rjags)
set.seed(42);
use.data <- cointoss10;
sample.count <- 10000;
chain.count  <- 5;
adapt.steps  <- 500;
burnin.steps <- 1000;
jagsPriorModel <- jags.model('singlemint_full.jag', data = list(nFlips = length(use.data)), n.chains = chain.count, n.adapt = adapt.steps);
update(jagsPriorModel, n.iter = burnin.steps);
coda.sample.data <- coda.samples(jagsPriorModel, variable.names = c('theta'), n.iter = sample.count);
mcmc.prior.samples <- as.matrix(coda.sample.data);
lsos()
use.data <- singlemint.multiplecoins
set.seed(42);
use.data <- cointoss10;
sample.count <- 10000;
chain.count  <- 5;
adapt.steps  <- 500;
burnin.steps <- 1000;
jagsPriorModel <- jags.model('singlemint_full.jag', data = list(nFlips = length(use.data)), n.chains = chain.count, n.adapt = adapt.steps);
update(jagsPriorModel, n.iter = burnin.steps);
coda.sample.data <- coda.samples(jagsPriorModel, variable.names = c('theta'), n.iter = sample.count);
mcmc.prior.samples <- as.matrix(coda.sample.data);
set.seed(42);
ysample.count <- 10000;
chain.count  <- 5;
adapt.steps  <- 500;
burnin.steps <- 1000;
jagsPriorModel <- jags.model('singlemint_full.jag', data = list(nFlips = length(use.data)), n.chains = chain.count, n.adapt = adapt.steps);
update(jagsPriorModel, n.iter = burnin.steps);
coda.sample.data <- coda.samples(jagsPriorModel, variable.names = c('theta'), n.iter = sample.count);
mcmc.prior.samples <- as.matrix(coda.sample.data);
set.seed(42);
sample.count <- 10000;
chain.count  <- 5;
adapt.steps  <- 500;
burnin.steps <- 1000;
set.seed(42);
sample.count <- 10000;
chain.count  <- 5;
adapt.steps  <- 500;
burnin.steps <- 1000;
set.seed(42);
sample.count <- 10000;
chain.count  <- 5;
adapt.steps  <- 500;
jagsPriorModel <- jags.model('singlemint_full.jag', data = list(nTrialTotal = dim(use.data)[2], nCoins = length(unique(use.data[, 'coin'])), n.chains = chain.count, n.adapt = adapt.steps);
jagsPriorModel <- jags.model('singlemint_full.jag', data = list(nTrialTotal = dim(use.data)[2], nCoins = length(unique(use.data[, 'coin'])), n.chains = chain.count, n.adapt = adapt.steps);
jagsPriorModel <- jags.model('singlemint_full.jag', data = list(nTrialTotal = dim(use.data)[2], nCoins = length(unique(use.data[, 'coin']))), n.chains = chain.count, n.adapt = adapt.steps);
use.data[, 'coin']
use.data['coin', ]
jagsPriorModel <- jags.model('singlemint_full.jag', data = list(nTrialTotal = dim(use.data)[2], nCoins = length(unique(use.data['coin', ]))), n.chains = chain.count, n.adapt = adapt.steps);
use.data['coin', ]
unique(use.data['coin', ])
length(unique(use.data['coin', ]))
jagsPriorModel <- jags.model('singlemint_full.jag', data = list(nTrialTotal = dim(use.data)[2], nCoins = length(unique(use.data['coin', ]))), n.chains = chain.count, n.adapt = adapt.steps);
dim(use.data)
dim(use.data)[2]
jagsPriorModel <- jags.model('singlemint_full.jag', data = list(nTrialTotal = dim(use.data)[2], nCoins = length(unique(use.data['coin', ])), coin = use.data['coin', ]), n.chains = chain.count, n.adapt = adapt.steps);
update(jagsPriorModel, n.iter = burnin.steps);
coda.sample.data <- coda.samples(jagsPriorModel, variable.names = c('theta'), n.iter = sample.count);
mcmc.prior.samples <- as.matrix(coda.sample.data);
jagsPosteriorModel <- jags.model('singlemint_full.jag', data = list(nTrialTotal = dim(use.data)[2], nCoins = length(unique(use.data['coin', ])), coin = use.data['coin', ], y = use.data['toss', ]), n.chains = chain.count, n.adapt = adapt.steps);
update(jagsPosteriorModel, n.iter = burnin.steps);
coda.sample.data <- coda.samples(jagsPosteriorModel, variable.names = c('theta'), n.iter = sample.count);
mcmc.posterior.samples <- as.matrix(coda.sample.data);
mcmc.prior.samples
head(mcmc.prior.samples)
update(jagsPosteriorModel, n.iter = burnin.steps);
coda.sample.data <- coda.samples(jagsPosteriorModel, variable.names = c('kappa', 'mu', 'theta'), n.iter = sample.count);
mcmc.posterior.samples <- as.matrix(coda.sample.data);
update(jagsPosteriorModel, n.iter = burnin.steps);
coda.sample.data <- coda.samples(jagsPosteriorModel, variable.names = c('kappa', 'mu', 'theta'), n.iter = sample.count);
mcmc.posterior.samples <- as.matrix(coda.sample.data);
update(jagsPriorModel, n.iter = burnin.steps);
coda.sample.data <- coda.samples(jagsPriorModel, variable.names = c('kappa', 'mu', 'theta'), n.iter = sample.count);
mcmc.prior.samples <- as.matrix(coda.sample.data);
head(mcmc.prior.samples)
qplot(mcmc.prior.samples['kappa', ], geom = 'density')
library(ggplot2)
qplot(mcmc.prior.samples['kappa', ], geom = 'density')
qplot(mcmc.prior.samples[, 'kappa'], geom = 'density')
qplot(mcmc.prior.samples['kappa'], geom = 'density')
mcmc.prior.samples['kappa']
mcmc.prior.samples['kappa', ]
mcmc.prior.samples[1]
mcmc.prior.samples['kappa', ]
mcmc.prior.samples[, 'kappa']
qplot(mcmc.prior.samples[, 'kappa'], geom = 'density')
qplot(mcmc.prior.samples[, 'kappa'], geom = 'density') + geom_density(aes(x = mcmc.posterior.samples[, 'kappa']), colour = 'red')
key <- 'kappa'; qplot(mcmc.prior.samples[, key], geom = 'density') + geom_density(aes(x = mcmc.posterior.samples[, key]), colour = 'red')
labelkey <- 'kappa'; qplot(mcmc.prior.samples[, labelkey], geom = 'density') + geom_density(aes(x = mcmc.posterior.samples[, labelkey]), colour = 'red')
labelkey <- 'mu'; qplot(mcmc.prior.samples[, labelkey], geom = 'density') + geom_density(aes(x = mcmc.posterior.samples[, labelkey]), colour = 'red')
labelkey <- 'theta[1]'; qplot(mcmc.prior.samples[, labelkey], geom = 'density') + geom_density(aes(x = mcmc.posterior.samples[, labelkey]), colour = 'red')
labelkey <- 'theta[2]'; qplot(mcmc.prior.samples[, labelkey], geom = 'density') + geom_density(aes(x = mcmc.posterior.samples[, labelkey]), colour = 'red')
labelkey <- 'theta[3]'; qplot(mcmc.prior.samples[, labelkey], geom = 'density') + geom_density(aes(x = mcmc.posterior.samples[, labelkey]), colour = 'red')
labelkey <- 'theta[4]'; qplot(mcmc.prior.samples[, labelkey], geom = 'density') + geom_density(aes(x = mcmc.posterior.samples[, labelkey]), colour = 'red')
labelkey <- 'theta[5]'; qplot(mcmc.prior.samples[, labelkey], geom = 'density') + geom_density(aes(x = mcmc.posterior.samples[, labelkey]), colour = 'red')
qplot(mcmc.prior.samples[, 'theta[1]'], mcmc.prior.samples[, 'theta[2]'], geom 
= 'density2d')
qplot(mcmc.prior.samples[, 'theta[1]'], mcmc.prior.samples[, 'theta[2]'], geom = 'density2d') 
qplot(mcmc.prior.samples[, 'theta[1]'], mcmc.prior.samples[, 'theta[3]'], geom = 'density2d') 
qplot(mcmc.post.samples[, 'theta[1]'], mcmc.post.samples[, 'theta[2]'], geom = 'density2d') 
qplot(mcmc.posterior.samples[, 'theta[1]'], mcmc.posterior.samples[, 'theta[2]'], geom = 'density2d') 
qplot(mcmc.posterior.samples[, 'mu'], mcmc.posterior.samples[, 'theta[2]'], geom = 'density2d') 
qplot(mcmc.posterior.samples[, 'mu'], mcmc.posterior.samples[, 'theta[2]'], geom = 'density2d', xlim = c(0, 1), ylim = c(0, 1)) 
qplot(mcmc.posterior.samples[, 'mu'], mcmc.posterior.samples[, 'theta[4]'], geom = 'density2d', xlim = c(0, 1), ylim = c(0, 1)) 
qplot(mcmc.posterior.samples[, 'mu'], mcmc.posterior.samples[, 'theta[4]'], geom = 'density2d', xlim = c(0, 1), ylim = c(0, 1)) + scale_colour_gradient(low = 'blue', high = 'red')
qplot(mcmc.posterior.samples[, 'mu'], mcmc.posterior.samples[, 'theta[4]'], geom = 'density2d', xlim = c(0, 1), ylim = c(0, 1)) + scale_fill_gradient(low = 'blue', high = 'red')
qplot(mcmc.posterior.samples[, 'mu'], mcmc.posterior.samples[, 'theta[4]'], geom = 'density2d') + scale_fill_gradient(low = 'blue', high = 'red')
qplot(mcmc.posterior.samples[, 'mu'], mcmc.posterior.samples[, 'theta[4]'], geom = 'density2d')
qplot(mcmc.posterior.samples[, 'mu'], mcmc.posterior.samples[, 'theta[4]'], geom = 'density2d') + scale_colour_gradient(high = 'red')
scale_colour_gradient
qplot(mcmc.posterior.samples[, 'mu'], mcmc.posterior.samples[, 'theta[4]'], geom = 'density2d') + scale_colour_gradient()
lsos()
rm(ysample.count)
key
labelkey
source('helper_functions.R', echo = TRUE)
generate.disease.test.data
generate.disease.test.data(1000000, prior.prob = 0.001, hit.rate = 0.99, false.alarm = 0.05)
disease.onetest <- generate.disease.test.data(1000000, prior.prob = 0.001, hit.rate = 0.99, false.alarm = 0.05)
disease.onetest
disease.onetest[1:10, ]
disease.onetest[1:2, 1:10]
head(t(disease.onetest))
calculate.disease.test.probabilities(disease.onetest)
calculate.disease.test.probabilities
disease.twotest <- generate.disease.twotest.data()
dim(disease.twotest)
str(disease.twotest)
length(disease.twotest[infected == 1 & test.1 == 1 & test.2 == 1]) / length(disease.twotest[test.1 == 1 & test.2 == 1])
length(disease.twotest[disease.twotest$infected == 1 & disease.twotest$test.1 == 1 & disease.twotest$test.2 == 1]) / length(disease.twotest[disease.twotest$test.1 == 1 & disease.twotest$test.2 == 1])
infected <- disease.twotest['infected', ]
infected
infected <- disease.twotest['infected', ]; test.1 <- disease.twotest['test1', ]; test.2 <- disease.twotest['test2', ];
infected <- disease.twotest['infected', ]; test.1 <- disease.twotest['test.1', ]; test.2 <- disease.twotest['test.2', ];
length(disease.twotest[infected == 1 & test.1 == 1 & test.2 == 1]) / length(disease.twotest[test.1 == 1 & test.2 == 1])
calculate.disease.test.probabilities(disease.onetest)
postdata <- generate.disease.test.data(prior.prob = 0.018946)
calculate.disease.test.probabilities(postdata)
postdata <- generate.disease.test.data(prior.prob = calculate.disease.test.probabilities(disease.onetest))
calculate.disease.test.probabilities(postdata)
calculate.disease.test.probabilities(generate.disease.test.data(prior.prob = calculate.disease.test.probabilities(disease.onetest)))
calculate.disease.test.probabilities(generate.disease.test.data(prior.prob = calculate.disease.test.probabilities(disease.onetest)))
disease.twotest <- generate.disease.twotest.data(1e8)
disease.twotest <- generate.disease.twotest.data(1e8); infected <- disease.twotest['infected', ]; test.1 <- disease.twotest['test.1', ]; test.2 <- disease.twotest['test.2', ];
lsos()
rm(disease.twotest)
rm(postdata)
disease.twotest <- generate.disease.twotest.data(1e8); infected <- disease.twotest['infected', ]; test.1 <- disease.twotest['test.1', ]; test.2 <- disease.twotest['test.2', ];
lsos()
gc()
disease.twotest <- generate.disease.twotest.data(1e7); infected <- disease.twotest['infected', ]; test.1 <- disease.twotest['test.1', ]; test.2 <- disease.twotest['test.2', ];
lsos()
length(disease.twotest[infected == 1 & test.1 == 1 & test.2 == 1]) / length(disease.twotest[test.1 == 1 & test.2 == 1])
calculate.disease.test.probabilities(generate.disease.test.data(prior.prob = calculate.disease.test.probabilities(disease.onetest)))
rm(disease.twotest)
lsos()
rm(infected, test.1, test.2)
lsos()
gc()
lsos()
 llply(c(0.1, 0.05, 0.01, 0.005, 0.001), function(fa) { calculate.data.probability(generate.disease.test.data(10000, false.alarm = fa)) })
library(plyr)
 llply(c(0.1, 0.05, 0.01, 0.005, 0.001), function(fa) { calculate.data.probability(generate.disease.test.data(10000, false.alarm = fa)) })
calculate.data.probability
 llply(c(0.1, 0.05, 0.01, 0.005, 0.001), function(fa) { calculate.disease.test.probability(generate.disease.test.data(10000, false.alarm = fa)) })
 llply(c(0.1, 0.05, 0.01, 0.005, 0.001), function(fa) { calculate.disease.test.probabilities(generate.disease.test.data(10000, false.alarm = fa)) })
unlist(llply(c(0.1, 0.05, 0.01, 0.005, 0.001), function(fa) { calculate.disease.test.probabilities(generate.disease.test.data(10000, false.alarm = fa)) }))
qplot(c(0.1, 0.05, 0.01, 0.005, 0.001), unlist(llply(c(0.1, 0.05, 0.01, 0.005, 0.001), function(fa) { calculate.disease.test.probabilities(generate.disease.test.data(10000, false.alarm = fa)) })), geom = 'line')
qplot(log(c(0.1, 0.05, 0.01, 0.005, 0.001)), unlist(llply(c(0.1, 0.05, 0.01, 0.005, 0.001), function(fa) { calculate.disease.test.probabilities(generate.disease.test.data(10000, false.alarm = fa)) })), geom = 'line')
qplot(log(c(0.1, 0.05, 0.01, 0.005, 0.001), base = 10), unlist(llply(c(0.1, 0.05, 0.01, 0.005, 0.001), function(fa) { calculate.disease.test.probabilities(generate.disease.test.data(10000, false.alarm = fa)) })), geom = 'line')
x <- c(0.1, 0.05, 0.01, 0.005, 0.001); qplot(x, unlist(x, function(fa) { calculate.disease.test.probabilities(generate.disease.test.data(10000, false.alarm = fa)) })), geom = 'line')
x <- c(0.1, 0.05, 0.01, 0.005, 0.001); qplot(x, unlist(x, function(fa) { calculate.disease.test.probabilities(generate.disease.test.data(10000, false.alarm = fa)) }), geom = 'line')
unlist(x, function(fa) { calculate.disease.test.probabilities(generate.disease.test.data(10000, false.alarm = fa)) })
x <- c(0.1, 0.05, 0.01, 0.005, 0.001); qplot(x, unlist(llply(x, function(fa) { calculate.disease.test.probabilities(generate.disease.test.data(10000, false.alarm = fa)) })), geom = 'line')
x <- c(0.1, 0.05, 0.01, 0.005, 0.001); qplot(1 - x, unlist(llply(x, function(fa) { calculate.disease.test.probabilities(generate.disease.test.data(10000, false.alarm = fa)) })), geom = 'line')
x <- seq(0, 1, be = 0.01); qplot(x, dbeta(x, 1, 1), geom = 'line')
x <- seq(0, 1, by = 0.01); qplot(x, dbeta(x, 1, 1), geom = 'line')
x <- seq(0, 1, by = 0.01); qplot(x, dbeta(x, 2, 2), geom = 'line')
x <- seq(0, 1, by = 0.01); qplot(x, dbeta(x, 1, 2), geom = 'line')
x <- seq(0, 1, by = 0.01); qplot(x, dbeta(x, 1, 3), geom = 'line')
x <- seq(0, 1, by = 0.01); qplot(x, dbeta(x, 2, 6), geom = 'line')
x <- seq(0, 1, by = 0.01); qplot(x, dbeta(x, 10, 10), geom = 'line')
x <- seq(0, 1, by = 0.01); qplot(x, dbeta(x, 51, 51), geom = 'line')
x <- seq(0, 1, by = 0.001); qplot(x, dbeta(x, 51, 51), geom = 'line')
x <- seq(0, 1, by = 0.001); qplot(x, qbeta(x, 51, 51), geom = 'line')
?rbeta
x <- seq(0, 1, by = 0.001); qplot(x, pbeta(x, 51, 51), geom = 'line')
x <- seq(0, 1, by = 0.001); qplot(x, pbeta(x, 101, 101), geom = 'line')
x <- seq(0, 1, by = 0.001); qplot(x, dbeta(x, 101, 101), geom = 'line')
x <- seq(0, 1, by = 0.001); qplot(x, pbeta(x, 11, 11), geom = 'line')
x <- seq(0, 1, by = 0.001); qplot(x, dbeta(x, 11, 11), geom = 'line')
q()
y
rbeta(5, 0.5 * 20, (1 - 0.5) * 20)
lapply(rbeta(5, 0.5 * 20, (1 - 0.5) * 20), function(mu) rbinom(50, mu))
?rbinom
lapply(rbeta(5, 0.5 * 20, (1 - 0.5) * 20), function(mu) rbinom(50, 1, mu))
lapply(rbeta(50, 0.5 * 20, (1 - 0.5) * 20), function(mu) rbinom(5, 1, mu))
q()
    unlist(lapply(rbeta(50, 0.5 * 20, (1 - 0.5) * 20), function(mu) rbinom(5, 1, mu)))
source('helper_functions.R', echo = TRUE)
generate.hierarchical.coin.data(0.5, 20, 5, 2500)
source('helper_functions.R', echo = TRUE)
generate.hierarchical.coin.data(0.5, 20, 5, 2500)
generate.hierarchical.coin.data(0.5, 20, 50, 2500)
generate.hierarchical.coin.data(0.5, 20, 50, 5 * 50)
cointoss.5.50 <- generate.hierarchical.coin.data(0.5, 20, 50, 5 * 50)
cointoss.5.50 <- generate.hierarchical.coin.data(0.5, 20, 5, 5 * 50)
cointoss.50.5 <- generate.hierarchical.coin.data(0.5, 20, 50, 5 * 50)
cointoss.50.5
cointoss.5.50
dir()
set.seed(42)
use.data <- cointoss.5.50
sample.count <- 10000;
chain.count  <- 5;
adapt.steps  <- 500;
burnin.steps <- 1000;
jagsPriorModel <- jags.model('singlemint_full.jag', data = list(nFlips = length(use.data)), n.chains = chain.count, n.adapt = adapt.steps);
update(jagsPriorModel, n.iter = burnin.steps);
coda.sample.data <- coda.samples(jagsPriorModel, variable.names = c('theta'), n.iter = sample.count);
mcmc.prior.samples <- as.matrix(coda.sample.data);
jagsPosteriorModel <- jags.model('singlemint_full.jag', data = list(nFlips = length(use.data), y = use.data), n.chains = chain.count, n.adapt = adapt.steps);
update(jagsPosteriorModel, n.iter = burnin.steps);
coda.sample.data = coda.samples(jagsPosteriorModel, variable.names = c('theta'), n.iter = sample.count);
mcmc.posterior.samples <- as.matrix(coda.sample.data);
library(rjags)
set.seed(42);
use.data <- cointoss.5.50;
sample.count <- 10000;
chain.count  <- 5;
adapt.steps  <- 500;
burnin.steps <- 1000;
jagsPriorModel <- jags.model('singlemint_singlecoin.jag', data = list(nFlips = length(use.data)), n.chains = chain.count, n.adapt = adapt.steps);
update(jagsPriorModel, n.iter = burnin.steps);
coda.sample.data <- coda.samples(jagsPriorModel, variable.names = c('theta'), n.iter = sample.count);
mcmc.prior.samples <- as.matrix(coda.sample.data);
jagsPosteriorModel <- jags.model('singlemint_singlecoin.jag', data = list(nFlips = length(use.data), y = use.data), n.chains = chain.count, n.adapt = adapt.steps);
update(jagsPosteriorModel, n.iter = burnin.steps);
coda.sample.data = coda.samples(jagsPosteriorModel, variable.names = c('theta'), n.iter = sample.count);
mcmc.posterior.samples <- as.matrix(coda.sample.data);
set.seed(42);
use.data <- cointoss.5.50;
sample.count <- 10000;
chain.count  <- 5;
adapt.steps  <- 500;
burnin.steps <- 1000;
jags.file <- 'singlemint_full.jag';
jagsPriorModel <- jags.model(jags.file, data = list(nFlips = length(use.data)), n.chains = chain.count, n.adapt = adapt.steps);
update(jagsPriorModel, n.iter = burnin.steps);
coda.sample.data <- coda.samples(jagsPriorModel, variable.names = c('mu', 'kappa', 'theta'), n.iter = sample.count);
mcmc.prior.samples <- as.matrix(coda.sample.data);
jagsPosteriorModel <- jags.model(jags.file, data = list(nFlips = length(use.data), y = use.data), n.chains = chain.count, n.adapt = adapt.steps);
update(jagsPosteriorModel, n.iter = burnin.steps);
coda.sample.data = coda.samples(jagsPosteriorModel, variable.names = c('mu', 'kappa', 'theta'), n.iter = sample.count);
mcmc.posterior.samples <- as.matrix(coda.sample.data);
set.seed(42);
use.data <- cointoss10;
sample.count <- 10000;
chain.count  <- 5;
adapt.steps  <- 500;
burnin.steps <- 1000;
jags.file <- 'singlemint_singlecoin.jag';
jagsPriorModel <- jags.model(jags.file, data = list(nFlips = length(use.data)), n.chains = chain.count, n.adapt = adapt.steps);
update(jagsPriorModel, n.iter = burnin.steps);
coda.sample.data <- coda.samples(jagsPriorModel, variable.names = c('theta'), n.iter = sample.count);
mcmc.prior.samples <- as.matrix(coda.sample.data);
jagsPosteriorModel <- jags.model(jags.file, data = list(nFlips = length(use.data), y = use.data), n.chains = chain.count, n.adapt = adapt.steps);
update(jagsPosteriorModel, n.iter = burnin.steps);
coda.sample.data = coda.samples(jagsPosteriorModel, variable.names = c('theta'), n.iter = sample.count);
mcmc.posterior.samples <- as.matrix(coda.sample.data);
set.seed(42);
use.data <- cointoss.5.50;
sample.count <- 10000;
chain.count  <- 5;
adapt.steps  <- 500;
burnin.steps <- 1000;
jags.file <- 'singlemint_full.jag';
jagsPriorModel <- jags.model(jags.file, data = list(nTrialTotal = dim(use.data)[2], nCoins = length(unique(use.data[, 'coins'])), coin = use.data[, 'coin'], y = use.data[, '']), n.chains = chain.count, n.adapt = adapt.steps);
use.data
jagsPriorModel <- jags.model(jags.file, data = list(nTrialTotal = dim(use.data)[2], nCoins = length(unique(use.data[, 'coin'])), coin = use.data[, 'coin'], y = use.data[, 'cointoss']), n.chains = chain.count, n.adapt = adapt.steps);
use.data[, 'coin']
use.data['coin', ]
jagsPriorModel <- jags.model(jags.file, data = list(nTrialTotal = dim(use.data)[2], nCoins = length(unique(use.data['coin', ])), coin = use.data['coin', ], y = use.data['cointoss', ]), n.chains = chain.count, n.adapt = adapt.steps);
jags.05.50.PriorModel <- jags.model(jags.file, data = list(nTrialTotal = dim(use.data)[2], nCoins = length(unique(use.data['coin', ])), coin = use.data['coin', ], y = use.data['cointoss', ]), n.chains = chain.count, n.adapt = adapt.steps); update(jags.05.50.PriorModel, n.iter = burnin.steps);
jags.05.50.PriorModel <- jags.model(jags.file, data = list(nTrialTotal = dim(use.data)[2], nCoins = length(unique(use.data['coin', ])), coin = use.data['coin', ], y = use.data['cointoss', ]), n.chains = chain.count, n.adapt = adapt.steps); update(jags.05.50.PriorModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jags.05.50.PriorModel, variable.names = c('mu', 'kappa', 'theta'), n.iter = sample.count); mcmc.05.50.prior.samples <- as.matrix(coda.sample.data);
jags.05.50.PriorModel <- jags.model(jags.file, data = list(nTrialTotal = dim(use.data)[2], nCoins = length(unique(use.data['coin', ])), coin = use.data['coin', ]), n.chains = chain.count, n.adapt = adapt.steps); update(jags.05.50.PriorModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jags.05.50.PriorModel, variable.names = c('mu', 'kappa', 'theta'), n.iter = sample.count); mcmc.05.50.prior.samples <- as.matrix(coda.sample.data); jags.05.50.PosteriorModel <- jags.model(jags.file, data = list(nTrialTotal = dim(use.data)[2], nCoins = length(unique(use.data['coin', ])), coin = use.data['coin', ], y = use.data[, 'cointoss', ])), n.chains = chain.count, n.adapt = adapt.steps); update(jags.05.50.PosteriorModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jags.05.50.PosteriorModel, variable.names = c('mu', 'kappa', 'theta'), n.iter = sample.count); mcmc.05.50.posterior.samples <- as.matrix(coda.sample.data);
jags.05.50.PriorModel <- jags.model(jags.file, data = list(nTrialTotal = dim(use.data)[2], nCoins = length(unique(use.data['coin', ])), coin = use.data['coin', ]), n.chains = chain.count, n.adapt = adapt.steps); update(jags.05.50.PriorModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jags.05.50.PriorModel, variable.names = c('mu', 'kappa', 'theta'), n.iter = sample.count); mcmc.05.50.prior.samples <- as.matrix(coda.sample.data); jags.05.50.PosteriorModel <- jags.model(jags.file, data = list(nTrialTotal = dim(use.data)[2], nCoins = length(unique(use.data['coin', ])), coin = use.data['coin', ], y = use.data[, 'cointoss', ]), n.chains = chain.count, n.adapt = adapt.steps); update(jags.05.50.PosteriorModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jags.05.50.PosteriorModel, variable.names = c('mu', 'kappa', 'theta'), n.iter = sample.count); mcmc.05.50.posterior.samples <- as.matrix(coda.sample.data);
jags.05.50.PriorModel <- jags.model(jags.file, data = list(nTrialTotal = dim(use.data)[2], nCoins = length(unique(use.data['coin', ])), coin = use.data['coin', ]), n.chains = chain.count, n.adapt = adapt.steps); update(jags.05.50.PriorModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jags.05.50.PriorModel, variable.names = c('mu', 'kappa', 'theta'), n.iter = sample.count); mcmc.05.50.prior.samples <- as.matrix(coda.sample.data); jags.05.50.PosteriorModel <- jags.model(jags.file, data = list(nTrialTotal = dim(use.data)[2], nCoins = length(unique(use.data['coin', ])), coin = use.data['coin', ], y = use.data['cointoss', ]), n.chains = chain.count, n.adapt = adapt.steps); update(jags.05.50.PosteriorModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jags.05.50.PosteriorModel, variable.names = c('mu', 'kappa', 'theta'), n.iter = sample.count); mcmc.05.50.posterior.samples <- as.matrix(coda.sample.data);
use.data <- coin.5.50; jags.05.50.PriorModel <- jags.model(jags.file, data = list(nTrialTotal = dim(use.data)[2], nCoins = length(unique(use.data['coin', ])), coin = use.data['coin', ]), n.chains = chain.count, n.adapt = adapt.steps); update(jags.05.50.PriorModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jags.05.50.PriorModel, variable.names = c('mu', 'kappa', 'theta'), n.iter = sample.count); mcmc.05.50.prior.samples <- as.matrix(coda.sample.data); jags.05.50.PosteriorModel <- jags.model(jags.file, data = list(nTrialTotal = dim(use.data)[2], nCoins = length(unique(use.data['coin', ])), coin = use.data['coin', ], y = use.data['cointoss', ]), n.chains = chain.count, n.adapt = adapt.steps); update(jags.05.50.PosteriorModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jags.05.50.PosteriorModel, variable.names = c('mu', 'kappa', 'theta'), n.iter = sample.count); mcmc.05.50.posterior.samples <- as.matrix(coda.sample.data);
use.data <- cointoss.5.50; jags.05.50.PriorModel <- jags.model(jags.file, data = list(nTrialTotal = dim(use.data)[2], nCoins = length(unique(use.data['coin', ])), coin = use.data['coin', ]), n.chains = chain.count, n.adapt = adapt.steps); update(jags.05.50.PriorModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jags.05.50.PriorModel, variable.names = c('mu', 'kappa', 'theta'), n.iter = sample.count); mcmc.05.50.prior.samples <- as.matrix(coda.sample.data); jags.05.50.PosteriorModel <- jags.model(jags.file, data = list(nTrialTotal = dim(use.data)[2], nCoins = length(unique(use.data['coin', ])), coin = use.data['coin', ], y = use.data['cointoss', ]), n.chains = chain.count, n.adapt = adapt.steps); update(jags.05.50.PosteriorModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jags.05.50.PosteriorModel, variable.names = c('mu', 'kappa', 'theta'), n.iter = sample.count); mcmc.05.50.posterior.samples <- as.matrix(coda.sample.data);
use.data <- cointoss.50.5; jags.50.05.PriorModel <- jags.model(jags.file, data = list(nTrialTotal = dim(use.data)[2], nCoins = length(unique(use.data['coin', ])), coin = use.data['coin', ]), n.chains = chain.count, n.adapt = adapt.steps); update(jags.50.05.PriorModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jags.50.05.PriorModel, variable.names = c('mu', 'kappa', 'theta'), n.iter = sample.count); mcmc.50.05.prior.samples <- as.matrix(coda.sample.data); jags.50.05.PosteriorModel <- jags.model(jags.file, data = list(nTrialTotal = dim(use.data)[2], nCoins = length(unique(use.data['coin', ])), coin = use.data['coin', ], y = use.data['cointoss', ]), n.chains = chain.count, n.adapt = adapt.steps); update(jags.50.05.PosteriorModel, n.iter = burnin.steps); coda.sample.data <- coda.samples(jags.50.05.PosteriorModel, variable.names = c('mu', 'kappa', 'theta'), n.iter = sample.count); mcmc.50.05.posterior.samples <- as.matrix(coda.sample.data);
lsos()
head(mcmc.50.05.posterior.samples)
qplot(mcmc.05.50.posterior.samples[, 'kappa'], geom = 'density', colour = I('red'))
library(ggplot2)
qplot(mcmc.05.50.posterior.samples[, 'kappa'], geom = 'density', colour = I('red'))
qplot(mcmc.05.50.posterior.samples[, 'kappa'], geom = 'density', colour = I('red')) + geom_density(aes(mcmc.50.05.posterior.samples[, 'kappa']), colour = 'blue')
qplot(mcmc.05.50.posterior.samples[, 'mu'], geom = 'density', colour = I('red')) + geom_density(aes(mcmc.50.05.posterior.samples[, 'mu']), colour = 'blue')
qplot(mcmc.05.50.posterior.samples[, 'mu'], geom = 'density', colour = I('red')) + geom_density(aes(mcmc.50.05.posterior.samples[, 'mu']), colour = 'blue') + geom_density(aes(mcmc.05.50.prior.samples[, 'mu']), colour = 'green') + geom_density(aes(mcmc.50.05.prior.samples[, 'mu']), colour = 'purple')
head(mcmc.50.05.posterior.samples)
qplot(mcmc.05.50.posterior.samples[, 'mu'], geom = 'boxplot', colour = I('red')) + geom_density(aes(mcmc.50.05.posterior.samples[, 'mu']), colour = 'blue') + geom_density(aes(mcmc.05.50.prior.samples[, 'mu']), colour = 'green') + geom_density(aes(mcmc.50.05.prior.samples[, 'mu']), colour = 'purple')
qplot(mcmc.05.50.posterior.samples[, 'mu'], geom = 'boxplot', colour = I('red'))
qplot(mcmc.05.50.posterior.samples[, 'mu'], geom = 'box', colour = I('red'))
geom_boxplott
geom_boxplot
?geom_boxplot
?geom_boxplot
qplot(mcmc.05.50.posterior.samples[, 'mu'], geom = 'boxplot')
qplot('05.50.post', mcmc.05.50.posterior.samples[, 'mu'], geom = 'boxplot')
qplot('05.50.post', mcmc.05.50.posterior.samples[, 'mu'], geom = 'boxplot', colour = I('red')) + geom_density(aes('50.05.post', mcmc.50.05.posterior.samples[, 'mu']), colour = 'blue')
qplot('05.50.post', mcmc.05.50.posterior.samples[, 'mu'], geom = 'boxplot', colour = I('red')) + geom_density(aes(x = '50.05.post', y = mcmc.50.05.posterior.samples[, 'mu']), colour = 'blue')
qplot('05.50.post', mcmc.05.50.posterior.samples[, 'mu'], geom = 'boxplot', colour = I('red')) + geom_boxplot(aes(x = '50.05.post', y = mcmc.50.05.posterior.samples[, 'mu']))
qplot(mcmc.05.50.posterior.samples[, 'mu'], geom = 'boxplot') + geom_boxplot(aes('50.05.post', mcmc.50.05.posterior.samples[, 'mu'])) + geom_boxplot(aes('05.50.prior', mcmc.05.50.prior.samples[, 'mu'])) + geom_boxplot(aes('50.05.prior', mcmc.50.05.prior.samples[, 'mu']))
qplot(mcmc.05.50.posterior.samples[, 'mu'], geom = 'boxplot') + geom_boxplot(aes('50.05.post', mcmc.50.05.posterior.samples[, 'mu'])) + geom_boxplot(aes('05.50.prior', mcmc.05.50.prior.samples[, 'mu'])) + geom_boxplot(aes('50.05.prior', mcmc.50.05.prior.samples[, 'mu']))
qplot(mcmc.05.50.posterior.samples[, 'mu'], geom = 'boxplot') + geom_boxplot(aes('50.05.post', mcmc.50.05.posterior.samples[, 'mu'])) + geom_boxplot(aes('05.50.prior', mcmc.05.50.prior.samples[, 'mu']))
qplot(mcmc.05.50.posterior.samples[, 'mu'], geom = 'boxplot') + geom_boxplot(aes('50.05.post', mcmc.50.05.posterior.samples[, 'mu']))
qplot(mcmc.05.50.posterior.samples[, 'mu'], geom = 'boxplot') + geom_boxplot(aes('50.05.post', mcmc.50.05.posterior.samples[, 'mu']))
qplot(mcmc.05.50.posterior.samples[, 'mu'], geom = 'boxplot', colour = I('red'))
qplot('05.50.post', mcmc.05.50.posterior.samples[, 'mu'], geom = 'boxplot', colour = I('red')) + geom_boxplot(aes(x = '50.05.post', y = mcmc.50.05.posterior.samples[, 'mu']))
qplot(mcmc.05.50.posterior.samples[, 'mu'], geom = 'boxplot') + geom_boxplot(aes(x = '50.05.post', y = mcmc.50.05.posterior.samples[, 'mu'])) + geom_boxplot(aes('05.50.prior', mcmc.05.50.prior.samples[, 'mu']))
qplot(mcmc.05.50.posterior.samples[, 'mu'], geom = 'boxplot') + geom_boxplot(aes(x = '50.05.post', y = mcmc.50.05.posterior.samples[, 'mu'])) + geom_boxplot(aes(x = '05.50.prior', y = mcmc.05.50.prior.samples[, 'mu']))
qplot(mcmc.05.50.posterior.samples[, 'mu'], geom = 'boxplot') + geom_boxplot(aes(x = '50.05.post', y = mcmc.50.05.posterior.samples[, 'mu']))
qplot('05.50.post', mcmc.05.50.posterior.samples[, 'mu'], geom = 'boxplot', colour = I('red')) + geom_boxplot(aes(x = '50.05.post', y = mcmc.50.05.posterior.samples[, 'mu']))
qplot('05.50.post', mcmc.05.50.posterior.samples[, 'mu'], geom = 'boxplot') + geom_boxplot(aes('50.05.post', mcmc.50.05.posterior.samples[, 'mu'])) + geom_boxplot(aes('05.50.prior', mcmc.05.50.prior.samples[, 'mu'])) + geom_boxplot(aes('50.05.prior', mcmc.50.05.prior.samples[, 'mu']))
q()
y
lsos()
rm(list = ls(pattern = 'mcmc.'))
lsos()
x
rm(x)
lsos()
rm(list = ls(pattern = 'jags.'))
lsos()
source('helper_functions.R')
cointoss.5.50 <- generate.hierarchical.coin.data(0.5, 20, 5, 5 * 50)
cointoss.5.50
dim(cointoss.5.50)
12500 / 50
5 * 5 * 50
source('helper_functions.R')
source('helper_functions.R'); test <- generate.hierarchical.coin.data(0.5, 20, 5, 5 * 50)
dim(test)
source('helper_functions.R'); test <- generate.hierarchical.coin.data(0.5, 20, 5, 5 * 50)
source('helper_functions.R'); test <- generate.hierarchical.coin.data(0.5, 20, 5, 5 * 50)
source('helper_functions.R'); test <- generate.hierarchical.coin.data(0.5, 20, 5, 5 * 50)
test
test[, 'theta']
test['theta', ]
qplot(test['theta', ], geom = 'density')
library(ggplot2)
qplot(test['theta', ], geom = 'density')
source('helper_functions.R'); test <- generate.hierarchical.coin.data(0.5, 20, 50, 5 * 50)
qplot(test['theta', ], geom = 'density')
qplot(test['theta', ], geom = 'density', xlim = c(0, 1))
qplot(unique(test['theta', ]), geom = 'density', xlim = c(0, 1))
source('helper_functions.R'); test <- generate.hierarchical.coin.data(0.5, 20, 5, 5 * 50)
qplot(unique(test['theta', ]), geom = 'density', xlim = c(0, 1))
unique(test['theta', ])
source('helper_functions.R'); test <- generate.hierarchical.coin.data(0.5, 50, 5, 5 * 50)
qplot(unique(test['theta', ]), geom = 'density', xlim = c(0, 1))
source('helper_functions.R'); test <- generate.hierarchical.coin.data(0.5, 50, 50, 5 * 50)
qplot(unique(test['theta', ]), geom = 'density', xlim = c(0, 1))
unique(test['theta', ])
lsos()
rm(cointoss.5.50)
lsos()
rm(use.data)
coin1
rm(coin1, coin2, coin3, coin4, coin5)
lsos()
rm(labelkey, key)
lsos()
rm(test)
disease.onetest
head(disease.onetest)
dim(disease.onetest)
lsos()
rm(coda.sample.data, disease.onetest)
lsos()
lsos(n = 50)
rm(cointoss.50.5)
lsos()
rm(singlemint.multiplecoins)
lsos9)
rm(adapt.steps, burnin.steps, chain.count, sample.count)
lsos()
generate.hierarchical.coin.data
q()
y
library(triangle)
x.grid <- seq(0, 1, by = 0.001)
dtriangle
dtriangle(x.grid)
qplot(x.grid, dtriangle(x.grid), geom = 'line')
library(ggplot2)
qplot(x.grid, dtriangle(x.grid), geom = 'line')
qplot(x.grid, dtriangle(x.grid, 0.25, 0.75), geom = 'line')
qplot(x.grid, dtriangle(x.grid, 0.25, 0.75, 0.6), geom = 'line')
qplot(x.grid, dtriangle(x.grid, 0, 0.5, 0.25), geom = 'line')
qplot(x.grid, dtriangle(x.grid, 0, 0.5, 0.75), geom = 'line')
qplot(x.grid, dtriangle(x.grid, 0, 0.75), geom = 'line')
qplot(x.grid, dtriangle(x.grid, 0, 0.75, 0.25), geom = 'line')
dtriangle(x.grid, 0, 0.75, 0.25) + dtriangle(x.grid, 0.25, 1, 0.75)
qplot(x.grid, dtriangle(x.grid, 0, 0.75, 0.25) + dtriangle(x.grid, 0.25, 1, 0.75), geom = 'line')
qplot(x.grid, dtriangle(x.grid, 0, 0.60, 0.25) + dtriangle(x.grid, 0.40, 1, 0.75), geom = 'line')
qplot(x.grid, dtriangle(x.grid, 0, 0.50, 0.25) + dtriangle(x.grid, 0.50, 1, 0.75), geom = 'line')
qplot(x.grid, dtriangle(x.grid, 0, 0.45, 0.25) + dtriangle(x.grid, 0.55, 1, 0.75), geom = 'line')
qplot(x.grid, dtriangle(x.grid, 0, 0.55, 0.25) + dtriangle(x.grid, 0.45, 1, 0.75), geom = 'line')
qplot(x.grid, dtriangle(x.grid, 0, 0.51, 0.25) + dtriangle(x.grid, 0.49, 1, 0.75), geom = 'line')
qplot(x.grid, dtriangle(x.grid, 0, 0.501, 0.25) + dtriangle(x.grid, 0.499, 1, 0.75), geom = 'line')
qplot(x.grid, dtriangle(x.grid, 0, 0.505, 0.25) + dtriangle(x.grid, 0.495, 1, 0.75), geom = 'line')
qplot(x.grid, dtriangle(x.grid, 0, 0.51, 0.25) + dtriangle(x.grid, 0.49, 1, 0.75), geom = 'line')
qplot(x.grid, dtriangle(x.grid, 0, 0.53, 0.25) + dtriangle(x.grid, 0.47, 1, 0.75), geom = 'line')
dtriangle(x.grid, 0, 0.53, 0.25) + dtriangle(x.grid, 0.47, 1, 0.75)
bimodal.prior <- dtriangle(x.grid, 0, 0.53, 0.25) + dtriangle(x.grid, 0.47, 1, 0.75)
lsos()
theta.grid <- x.grid
rm(x.grid)
cointoss10 <- readRDS('cointoss10.rds')
cointoss1000 <- readRDS('cointoss1000.rds')
cointoss1000
sum(cointoss1000)
bimodal.posterior <- calculate.posterior.density(bimodal.prior, cointoss10, theta.grid)
qplot(theta.grid, bimodal.posterior, geom = 'line')
bimodal.prior <- dbeta(theta.grid, 5, 15) + dbeta(theta.grid, 15, 5)
bimodal.posterior <- calculate.posterior.density(bimodal.prior, cointoss10, theta.grid)
qplot(theta.grid, bimodal.posterior, geom = 'line')
cointoss1000 <- readRDS('cointoss1000.rds')
bimodal.posterior.10 <- calculate.posterior.density(bimodal.prior, cointoss10, theta.grid)
bimodal.posterior.1000 <- calculate.posterior.density(bimodal.prior, cointoss1000, theta.grid)
qplot(theta.grid, bimodal.prior, geom = 'line') + geom_line(aes(y = bimodal.posterior.10), colour = 'red')
trimodal <- dbeta(theta.grid, 5, 15) + dbeta(theta.grid, 10, 10) + dbeta(theta.grid, 15, 5)
trimodal.prior <- dbeta(theta.grid, 5, 15) + dbeta(theta.grid, 10, 10) + dbeta(theta.grid, 15, 5)
rm(trimodal)
trimodal.posterior.10 <- calculate.posterior.density(trimodal.prior, cointoss10, theta.grid)
trimodal.posterior.1000 <- calculate.posterior.density(trimodal.prior, cointoss1000, theta.grid)
qplot(theta.grid, trimodal.prior, geom = 'line') + geom_line(aes(y = trimodal.posterior.10), colour = 'red')
qplot(theta.grid, trimodal.prior, geom = 'line') + geom_line(aes(y = trimodal.posterior.1000), colour = 'red')
q()
trimodal.prior <- dbeta(theta.grid, 50, 150) + dbeta(theta.grid, 100, 100) + dbeta(theta.grid, 150, 50)
trimodal.posterior.10 <- calculate.posterior.density(trimodal.prior, cointoss10, theta.grid)
qplot(theta.grid, trimodal.prior, geom = 'line') + geom_line(aes(y = trimodal.posterior.1000), colour = 'red')
library(ggplot2)
qplot(theta.grid, trimodal.prior, geom = 'line') + geom_line(aes(y = trimodal.posterior.1000), colour = 'red')
qplot(theta.grid, trimodal.prior, geom = 'line') + geom_line(aes(y = trimodal.posterior.10), colour = 'red')
trimodal.prior <- dbeta(theta.grid, 100, 300) + dbeta(theta.grid, 200, 200) + dbeta(theta.grid, 300, 100)
trimodal.prior <- dbeta(theta.grid, 100, 300) + dbeta(theta.grid, 200, 200) + dbeta(theta.grid, 300, 100); trimodal.posterior.10 <- calculate.posterior.density(trimodal.prior, cointoss10, theta.grid)
trimodal.prior <- dbeta(theta.grid, 100, 300) + dbeta(theta.grid, 200, 200) + dbeta(theta.grid, 300, 100); trimodal.posterior.10 <- calculate.posterior.density(trimodal.prior, cointoss10, theta.grid);
qplot(theta.grid, trimodal.prior, geom = 'line') + geom_line(aes(y = trimodal.posterior.10), colour = 'red')
qplot(theta.grid, dbeta(theta.grid, 100, 300), geom = 'line') + geom_line(aes(y = dbeta(theta.grid, 200, 200)), colour = 'red') + geom_line(aes(y = dbeta(theta.grid, 300, 100)), colour = 'blue');
trimodal.prior <- dbeta(theta.grid, 1, 3) + dbeta(theta.grid, 2, 2) + dbeta(theta.grid, 3, 1); trimodal.posterior.10 <- calculate.posterior.density(trimodal.prior, cointoss10, theta.grid);
qplot(theta.grid, dbeta(theta.grid, 100, 300), geom = 'line') + geom_line(aes(y = dbeta(theta.grid, 200, 200)), colour = 'red') + geom_line(aes(y = dbeta(theta.grid, 300, 100)), colour = 'blue');
qplot(theta.grid, trimodal.prior, geom = 'line') + geom_line(aes(y = trimodal.posterior.10), colour = 'red')
qplot(theta.grid, trimodal.prior, geom = 'line') + geom_line(aes(y = trimodal.posterior.10), colour = 'red')
trimodal.prior <- (dbeta(theta.grid, 1, 3) + dbeta(theta.grid, 2, 2) + dbeta(theta.grid, 3, 1)) / 3; trimodal.posterior.10 <- calculate.posterior.density(trimodal.prior, cointoss10, theta.grid);
qplot(theta.grid, trimodal.prior, geom = 'line') + geom_line(aes(y = trimodal.posterior.10), colour = 'red')
qplot(theta.grid, rbeta(theta.grid, 1, 3), geom = 'line')
qplot(theta.grid, dbeta(theta.grid, 1, 3), geom = 'line')
qplot(theta.grid, dbeta(theta.grid, 2, 6), geom = 'line')
qplot(theta.grid, dbeta(theta.grid, 5, 15), geom = 'line')
qplot(theta.grid, dbeta(theta.grid, 1, 3), geom = 'line')
qplot(theta.grid, dbeta(theta.grid, 2, 4), geom = 'line')
trimodal.prior <- (dbeta(theta.grid, 2, 4) + dbeta(theta.grid, 3, 3) + dbeta(theta.grid, 4, 2)) / 3; trimodal.posterior.10 <- calculate.posterior.density(trimodal.prior, cointoss10, theta.grid);
qplot(theta.grid, trimodal.prior, geom = 'line') + geom_line(aes(y = trimodal.posterior.10), colour = 'red')
trimodal.prior <- (dbeta(theta.grid, 20, 40) + dbeta(theta.grid, 30, 30) + dbeta(theta.grid, 40, 20)) / 3; trimodal.posterior.10 <- calculate.posterior.density(trimodal.prior, cointoss10, theta.grid);
qplot(theta.grid, trimodal.prior, geom = 'line') + geom_line(aes(y = trimodal.posterior.10), colour = 'red')
trimodal.prior <- (dbeta(theta.grid, 11, 31) + dbeta(theta.grid, 31, 31) + dbeta(theta.grid, 31, 11)) / 3; trimodal.posterior.10 <- calculate.posterior.density(trimodal.prior, cointoss10, theta.grid);
qplot(theta.grid, trimodal.prior, geom = 'line') + geom_line(aes(y = trimodal.posterior.10), colour = 'red')
trimodal.prior <- (dbeta(theta.grid, 11, 31) + dbeta(theta.grid, 31, 31) + dbeta(theta.grid, 31, 11)) / 3; trimodal.posterior.10 <- calculate.posterior.density(trimodal.prior, cointoss10, theta.grid); trimodal.posterior.1000 <- calculate.posterior.density(trimodal.prior, cointoss1000, theta.grid);
qplot(theta.grid, trimodal.prior, geom = 'line') + geom_line(aes(y = trimodal.posterior.10), colour = 'red')
qplot(theta.grid, trimodal.prior, geom = 'line') + geom_line(aes(y = trimodal.posterior.10), colour = 'red') + geom_line(aes(y = trimodal.posterior.1000), colour = 'blue')
q()
y
source('helper_functions.R')
disease.data <- generate.disease.test.data()
disease.data
head(disease.data)
disease.data[, 1:10]
calculate.disease.test.probabilities(disease.data)
source('sample_exercise_code.R')
llply
prior.prob.vector <- c(0.0001, 0.0005, 0.001, 0.005, 0.01, 0.05, 0.1);
cond.prob.vector <- llply(prior.prob.vector, function(prob) calculate.disease.test.probabilities(n = 1000000, prior.prob = prob, hit.rate = 0.99, false.alarm = 0.05));
prior.prob.vector <- c(0.0001, 0.0005, 0.001, 0.005, 0.01, 0.05, 0.1);
cond.prob.vector <- llply(prior.prob.vector, function(prob) calculate.disease.test.probabilities(n = 1000000, prior.prob = prob, hit.rate = 0.99, false.alarm = 0.05));
source('sample_exercise_code.R')
qplot(prior.prob.vector, cond.prob.vector, geom = 'line');
cond.prob.vector
cond.prob.vector <- aaply(prior.prob.vector, function(prob) calculate.disease.test.probabilities(generate.disease.test.data(n = 1000000, prior.prob = prob, hit.rate = 0.99, false.alarm = 0.05)));
qplot(prior.prob.vector, cond.prob.vector, geom = 'line');
cond.prob.vector
calculate.disease.test.probabilities(generate.disease.test.data(1000000, 0.001, 0.99, 0.05))
source('sample_exercise_code.R')
cond.prob.vector
unlist(cond.prob.vector)
source('sample_exercise_code.R')
qplot(prior.prob.vector, cond.prob.vector, geom = 'line');
qplot(prior.prob.vector, cond.prob.vector, geom = 'line', ylim = c(0, 1));
qplot(prior.prob.vector, cond.prob.vector, geom = 'line', ylim = c(0, 1));
source('sample_exercise_code.R')
qplot(prior.prob.vector, cond.prob.vector, geom = 'line', ylim = c(0, 1));
fa.prob.vector <- c(0.0001, 0.0005, 0.001, 0.005, 0.01, 0.05, 0.1, 0.5, 0.9);
cond.prob.vector <- unlist(llply(prior.prob.vector, function(prob) calculate.disease.test.probabilities(generate.disease.test.data(n = 1000000, prior.prob = 0.001, hit.rate = 0.99, false.alarm = prob))));
qplot(prior.prob.vector, cond.prob.vector, geom = 'line', ylim = c(0, 1));
fa.prob.vector <- c(0.0001, 0.0005, 0.001, 0.005, 0.01, 0.05, 0.1, 0.5, 0.9);
cond.prob.vector <- unlist(llply(prior.prob.vector, function(prob) calculate.disease.test.probabilities(generate.disease.test.data(n = 1000000, prior.prob = 0.001, hit.rate = 0.99, false.alarm = prob))));
qplot(prior.prob.vector, cond.prob.vector, geom = 'line', ylim = c(0, 1));
qplot(prior.prob.vector, cond.prob.vector, geom = 'line', ylim = c(0, 1));
fa.prob.vector <- c(0.0001, 0.0005, 0.001, 0.005, 0.01, 0.05, 0.1, 0.5, 0.9);
cond.prob.vector <- unlist(llply(prior.prob.vector, function(prob) calculate.disease.test.probabilities(generate.disease.test.data(n = 1000000, prior.prob = 0.001, hit.rate = 0.99, false.alarm = prob))));
qplot(prior.prob.vector, cond.prob.vector, geom = 'line', ylim = c(0, 1));
fa.prob.vector <- c(0.0001, 0.0005, 0.001, 0.005, 0.01, 0.05, 0.1, 0.5, 0.9);
cond.prob.vector <- unlist(llply(prior.prob.vector, function(prob) calculate.disease.test.probabilities(generate.disease.test.data(n = 1000000, prior.prob = 0.001, hit.rate = 0.99, false.alarm = prob))));
qplot(fa.prob.vector, cond.prob.vector, geom = 'line', ylim = c(0, 1));
disease.twotest.data <- generate.disease.twotest.data(n = 1000000, prior.prob = 0.001, hit.rate.1 = 0.99, false.alarm.1 = 0.05, hit.rate.2 = 0.99, false.alarm.2 = 0.05)
disease.twotest.data
disease.twotest.data[, 1:10]
disease.twotest.data[, 1:10]
calc.twotest.prob <- function(data) {
    infected <- data['infected', ]; test.1 <- data['test.1', ]; test.2 <- data['test.2', ];
    return(length(data[infected == 1 & test.1 == 1 & test.2 == 1]) / length(data[test.1 == 1 & test.2 == 1]));
}
calc.twotest.prob(disease.twotest.data);
calc.twotest.prob <- function(data) {
?llply
 crossprod
?crossprod
outer
?outer
outer(c(1,2), c(3,4))
outer(c(1,2), c(3,4), paste)
lsos()
fa.prob.vector
outer(fa.prob.vector, fa.prob.vector, function(fa1, fa2) calc.twotest.prob(generate.disease.twotest.data(false.alarm.1 = fa1, false.alarm.2 = fa2)))
function(fa1, fa2) calc.twotest.prob(generate.disease.twotest.data(false.alarm.1 = fa1, false.alarm.2 = fa2))
(function(fa1, fa2) calc.twotest.prob(generate.disease.twotest.data(false.alarm.1 = fa1, false.alarm.2 = fa2)))(0.001, 0.001)
(function(fa1, fa2) calc.twotest.prob(generate.disease.twotest.data(false.alarm.1 = fa1, false.alarm.2 = fa2)))(0.01, 0.01)
(function(fa1, fa2) calc.twotest.prob(generate.disease.twotest.data(false.alarm.1 = fa1, false.alarm.2 = fa2)))(0.05, 0.05)
outer(fa.prob.vector, fa.prob.vector, function(fa1, fa2) calc.twotest.prob(generate.disease.twotest.data(false.alarm.1 = fa1, false.alarm.2 = fa2)))
fa.prob.vector
length(fa.prob.vector)
outer(fa.prob.vector, fa.prob.vector, function(fa1, fa2) calc.twotest.prob(generate.disease.twotest.data(false.alarm.1 = fa1, false.alarm.2 = fa2)))
outer(fa.prob.vector[1], fa.prob.vector[1:2], function(fa1, fa2) calc.twotest.prob(generate.disease.twotest.data(false.alarm.1 = fa1, false.alarm.2 = fa2)))
?outer
ddply(expand.grid(fa1 = fa.prob.vector, fa2 = fa.prob.vector[1:2]), function(fa1, fa2) calc.twotest.prob(generate.disease.twotest.data(false.alarm.1 = fa1, false.alarm.2 = fa2)))
ddply(expand.grid(fa1 = fa.prob.vector, fa2 = fa.prob.vector), function(fa1, fa2) calc.twotest.prob(generate.disease.twotest.data(false.alarm.1 = fa1, false.alarm.2 = fa2)))
?ddply
daply(expand.grid(fa1 = fa.prob.vector, fa2 = fa.prob.vector), function(fa1, fa2) calc.twotest.prob(generate.disease.twotest.data(false.alarm.1 = fa1, false.alarm.2 = fa2)))
daply(expand.grid(fa1 = fa.prob.vector, fa2 = fa.prob.vector), function(df) calc.twotest.prob(generate.disease.twotest.data(false.alarm.1 = df$fa1, false.alarm.2 = df$fa2)))
calc.twotest.prob
generate.disease.twotest.data(false.alarm.1 = 0.01, false.alarm.2 = 0.01)
calc.twotest.prob(generate.disease.twotest.data(false.alarm.1 = 0.01, false.alarm.2 = 0.01))
expand.grid(fa1 = fa.prob.vector, fa2 = fa.prob.vector)
head(expand.grid(fa1 = fa.prob.vector, fa2 = fa.prob.vector))
daply(expand.grid(fa1 = fa.prob.vector, fa2 = fa.prob.vector), function(df) calc.twotest.prob(generate.disease.twotest.data(false.alarm.1 = df$fa1, false.alarm.2 = df$fa2)))
ddply(expand.grid(fa1 = fa.prob.vector, fa2 = fa.prob.vector), function(df) calc.twotest.prob(generate.disease.twotest.data(false.alarm.1 = df$fa1, false.alarm.2 = df$fa2)))
?ddply
ddply(expand.grid(fa1 = fa.prob.vector, fa2 = fa.prob.vector), .(fa1, fa2), function(df) calc.twotest.prob(generate.disease.twotest.data(false.alarm.1 = df$fa1, false.alarm.2 = df$fa2)))
ddply(expand.grid(fa1 = fa.prob.vector[1:3], fa2 = fa.prob.vector[1:3]), .(fa1, fa2), function(df) calc.twotest.prob(generate.disease.twotest.data(false.alarm.1 = df$fa1, false.alarm.2 = df$fa2)))
test.df <- ddply(expand.grid(fa1 = fa.prob.vector, fa2 = fa.prob.vector), .(fa1, fa2), function(df) calc.twotest.prob(generate.disease.twotest.data(false.alarm.1 = df$fa1, false.alarm.2 = df$fa2)))
qplot(fa1, fa2, data = test.df, colour = V1)
qplot(fa1, fa2, data = test.df, colour = V1) + scale_y_log10();
qplot(fa1, fa2, data = test.df, colour = V1) + scale_x_log10() + scale_y_log10();
with(test.df, persp(fa1, fa2, V1))
persp(test.df$fa1, test.df$fa2, test.df$V1)
test.df$fa1
?persp
with(test.df[order(fa1, fa2)], persp(fa1, fa2, V1))
with(test.df[order(test.df$fa1, test.df$fa2)], persp(fa1, fa2, V1))
test.df
test.df[order(test.df$fa1, test.df$fa2)]
test.df
head(test.df)
order(test.df$fa1, test.df$fa2)
test.df[order(test.df$fa1, test.df$fa2), ]
with(test.df[order(test.df$fa1, test.df$fa2), ], persp(fa1, fa2, V1))
with(test.df[order(test.df$fa2, test.df$fa1), ], persp(fa1, fa2, V1))
plot.df <- test.df[order(test.df$fa1, test.df$fa2), ]
plot.df
persp(plot.df$fa1, plot.df$fa2, plot.df$V1)
?persp
test.lst
test.df
as.matrix(test.df)
persp(as.matrix(test.df))
qplot(fa1, fa2, data = test.df, colour = V1) + scale_x_log10() + scale_y_log10();
qplot(fa1, fa2, data = test.df, colour = V1, geom = 'tile') + scale_x_log10() + scale_y_log10();
qplot(fa1, fa2, data = test.df, colour = V1) + scale_x_log10() + scale_y_log10();
qplot(fa1, fa2, geom = 'tile', data = test.df, colour = V1) + scale_x_log10() + scale_y_log10();
qplot(fa1, fa2, geom = 'tile', data = test.df, fill = V1) + scale_x_log10() + scale_y_log10();
persp(as.matrix(test.df), phi = 45)
persp(as.matrix(test.df), phi = -45)
persp(as.matrix(test.df), phi = 45, theta = 45)
as.matrix(test.df)
qplot(fa1, fa2, data = test.df, colour = V1) + scale_x_log10() + scale_y_log10();
qplot(fa1, fa2, data = test.df, geom = 'tile', colour = V1) + scale_x_log10() + scale_y_log10();
qplot(fa1, fa2, data = test.df, geom = 'tile', fill = V1) + scale_x_log10() + scale_y_log10();
qplot(fa1, fa2, data = test.df, geom = 'tile', fill = V1);
test.df
qplot(fa1, fa2, data = test.df, geom = 'tile', fill = V1, colour = V1);
qplot(fa1, fa2, data = test.df, geom = 'contour');
qplot(fa1, fa2, V1, data = test.df, geom = 'contour');
?qplot
qplot(fa1, fa2, z = V1, data = test.df, geom = 'contour');
qplot(fa1, fa2, z = V1, data = test.df, geom = 'contour') + scale_x_log10();
qplot(fa1, fa2, z = V1, data = test.df, geom = 'contour') + scale_x_log10() + scale_y_log10();
qplot(fa1, fa2, z = V1, data = test.df, geom = 'contour', xlim = c(0, 1)) + scale_x_log10() + scale_y_log10();
qplot(fa1, fa2, z = V1, data = test.df, geom = 'contour') + scale_x_log10(limit = c(0, 1)) + scale_y_log10();
?scale_x_log10
qplot(fa1, fa2, z = V1, data = test.df, geom = 'contour') + scale_x_log10(limits = c(0, 1)) + scale_y_log10();
qplot(fa1, fa2, z = V1, data = test.df, geom = 'contour') + scale_x_log10() + scale_y_log10();
qplot(fa1, fa2, z = V1, data = test.df, geom = 'contour', colour = V1) + scale_x_log10() + scale_y_log10();
qplot(fa1, fa2, z = V1, data = test.df, geom = 'contour') + scale_x_log10() + scale_y_log10();
?geom_contour
qplot(fa1, fa2, z = V1, data = test.df, geom = 'contour', colour == ..V1..) + scale_x_log10() + scale_y_log10();
qplot(fa1, fa2, z = V1, data = test.df, geom = 'contour', colour = ..V1..) + scale_x_log10() + scale_y_log10();
qplot(fa1, fa2, z = V1, data = test.df, geom = 'contour', colour = V1) + scale_x_log10() + scale_y_log10();
qplot(fa1, fa2, z = V1, data = test.df, stat = 'contour', geom = 'path') + scale_x_log10() + scale_y_log10();
qplot(fa1, fa2, z = V1, data = test.df, geom = 'contour', colour = V1) + scale_x_log10() + scale_y_log10();
qplot(fa1, fa2, z = V1, data = test.df, geom = 'contour', colour = ..level..) + scale_x_log10() + scale_y_log10();
x <- seq(0, 1, by = 0.001)
qplot(x, dbeta(x, 1, 1), geom = 'line')
qplot(x, dbeta(x, 2, 2), geom = 'line')
theta.grid <- seq(0, 1, by = 0.001);
qplot(theta.grid, dbeta(theta.grid, 1, 1), geom = 'line') + geom_line(aes(y = dbeta(theta.grid, 5, 5)), colour = 'red') + geom_line(aes(y = dbeta(theta.grid, 10, 10)), colour = 'blue');
theta.grid <- seq(0, 1, by = 0.001);
qplot(theta.grid, dbeta(theta.grid, 1, 1), geom = 'line')
    + geom_line(aes(y = dbeta(theta.grid, 5, 5)), colour = 'red')
    + geom_line(aes(y = dbeta(theta.grid, 10, 10)), colour = 'blue');
qplot(theta.grid, dbeta(theta.grid, 1, 1), geom = 'line') +
    geom_line(aes(y = dbeta(theta.grid, 5, 5)), colour = 'red') +
    geom_line(aes(y = dbeta(theta.grid, 10, 10)), colour = 'blue');
qplot(theta.grid, dbeta(theta.grid, 1, 1), geom = 'line') +
    geom_line(aes(y = dbeta(theta.grid,  5,  5)), colour = 'red') +
    geom_line(aes(y = dbeta(theta.grid, 10, 10)), colour = 'blue') +
    geom_line(aes(y = dbeta(theta.grid, 10, 20)), colour = 'green') +
    geom_line(aes(y = dbeta(theta.grid, 50, 10)), colour = 'yellow');
qplot(theta.grid, dbeta(theta.grid, 1, 1), geom = 'line') +
    geom_line(aes(y = dbeta(theta.grid,  5,  5)), colour = 'red') +
    geom_line(aes(y = dbeta(theta.grid, 10, 10)), colour = 'blue') +
    geom_line(aes(y = dbeta(theta.grid, 10, 20)), colour = 'green') +
    geom_line(aes(y = dbeta(theta.grid, 50, 10)), colour = 'purple');
cointoss10 <- readRDS('cointoss10.rds');
n.heads <- length(cointoss10[cointoss10 == 1]);
n.tails <- length(cointoss10[cointoss10 == 0]);
qplot(theta.grid, dbeta(theta.grid, 1, 1), geom = 'line') + geom_line(aes(y = dbeta(theta.grid,  1 + n.heads, 1 + n.tails)), colour = 'red');
qplot(theta.grid, dbeta(theta.grid, 10, 10), geom = 'line') + geom_line(aes(y = dbeta(theta.grid,  10 + n.heads, 10 + n.tails)), colour = 'red');
cointoss1000 <- readRDS('cointoss1000.rds');
n.heads.1000 <- length(cointoss1000[cointoss1000 == 1]);
n.tails.1000 <- length(cointoss1000[cointoss1000 == 0]);
qplot(theta.grid, dbeta(theta.grid, 1, 1), geom = 'line') + geom_line(aes(y = dbeta(theta.grid,  1 + n.heads.1000, 1 + n.tails.1000)), colour = 'red');
qplot(theta.grid, dbeta(theta.grid, 10, 10), geom = 'line') + geom_line(aes(y = dbeta(theta.grid,  10 + n.heads.1000, 10 + n.tails.1000)), colour = 'red');
qplot(theta.grid, dbeta(theta.grid, 1, 1), geom = 'line') + geom_line(aes(y = dbeta(theta.grid,  1 + n.heads.1000, 1 + n.tails.1000)), colour = 'red');
qplot(theta.grid, dbeta(theta.grid, 1, 1), geom = 'line') + geom_line(aes(y = dbeta(theta.grid,  1 + n.heads.10, 1 + n.tails.10)), colour = 'red') + geom_line(aes(y = dbeta(theta.grid,  1 + n.heads.1000, 1 + n.tails.1000)), colour = 'blue');
cointoss10 <- readRDS('cointoss10.rds');
n.heads.10 <- length(cointoss10[cointoss10 == 1]);
n.tails.10 <- length(cointoss10[cointoss10 == 0]);
qplot(theta.grid, dbeta(theta.grid, 1, 1), geom = 'line') + geom_line(aes(y = dbeta(theta.grid,  1 + n.heads.10, 1 + n.tails.10)), colour = 'red') + geom_line(aes(y = dbeta(theta.grid,  1 + n.heads.1000, 1 + n.tails.1000)), colour = 'blue');
qplot(theta.grid, dbeta(theta.grid, 10, 10), geom = 'line') + geom_line(aes(y = dbeta(theta.grid,  1 + n.heads.10, 1 + n.tails.10)), colour = 'red') + geom_line(aes(y = dbeta(theta.grid,  10 + n.heads.1000, 10 + n.tails.1000)), colour = 'blue');
qplot(fa1, fa2, z = V1, data = test.df, geom = 'contour', colour = ..level..) + scale_x_log10() + scale_y_log10();
calculate.posterior.density
calculate.posterior.density(dbeta(theta.grid, 1, 1), cointoss10, theta.grid)
qplot(theta.grid, calculate.posterior.density(dbeta(theta.grid, 1, 1), cointoss10, theta.grid), geom = 'line')
qplot(theta.grid, calculate.posterior.density(dbeta(theta.grid, 1, 1), cointoss10, theta.grid), geom = 'line') + geom_line(aes(y = dbeta(theta.grid, 1 + n.heads.10, 1 + n.heads.10)), colour = 'blue')
n.heads.10
1 + n.heads.10
qplot(theta.grid, calculate.posterior.density(dbeta(theta.grid, 1, 1), cointoss10, theta.grid), geom = 'line') + geom_line(aes(y = dbeta(theta.grid, 1 + n.heads.10, 1 + n.tails.10)), colour = 'blue')
qplot(theta.grid, dbeta(theta.grid, 10, 10), geom = 'line') + geom_line(aes(y = dbeta(theta.grid,  1 + n.heads.10, 1 + n.tails.10)), colour = 'red') + geom_line(aes(y = dbeta(theta.grid,  10 + n.heads.1000, 10 + n.tails.1000)), colour = 'blue');
bimodal.prior     <- (dbeta(theta.grid, 30, 10) + dbeta(theta.grid, 10, 30)) / 2;
bimodal.posterior <- calculate.posterior.density(bimodal.prior, cointoss10, theta.grid);
qplot(theta.grid, bimodal.prior, geom = 'line') + geom_line(aes(y = bimodal.posterior),   colour = 'blue');
bimodal.prior.1000     <- (dbeta(theta.grid, 30, 10) + dbeta(theta.grid, 10, 30)) / 2;
bimodal.posterior.1000 <- calculate.posterior.density(bimodal.prior.1000, cointoss1000, theta.grid);
qplot(theta.grid, bimodal.prior.1000, geom = 'line') + geom_line(aes(y = bimodal.posterior.1000),   colour = 'blue');
trimodal.prior.10     <- (dbeta(theta.grid, 30, 10) + dbeta(theta.grid, 10, 30) + dbeta(theta.grid, 20, 20)) / 3;
trimodal.posterior.10 <- calculate.posterior.density(trimodal.prior.10, cointoss10, theta.grid);
qplot(theta.grid, trimodal.prior.10, geom = 'line') + geom_line(aes(y = trimodal.posterior.10),   colour = 'blue');
trimodal.prior.1000     <- (dbeta(theta.grid, 30, 10) + dbeta(theta.grid, 10, 30) + dbeta(theta.grid, 20, 20)) / 3;
trimodal.posterior.1000 <- calculate.posterior.density(trimodal.prior.1000, cointoss1000, theta.grid);
qplot(theta.grid, trimodal.prior.1000, geom = 'line') + geom_line(aes(y = trimodal.posterior.1000),   colour = 'blue');
test.trimodal <- (dbeta(theta.grid, 300, 100) + dbeta(theta.grid, 100, 300) + dbeta(theta.grid, 200, 200)) / 3;
qplot(theta.grid, test.trimodal, geom = 'line')
test.trimodal <- (dbeta(theta.grid, 150, 50) + dbeta(theta.grid, 50, 150) + dbeta(theta.grid, 100, 100)) / 3; qplot(theta.grid, test.trimodal, geom = 'line')
test.trimodal <- (dbeta(theta.grid, 150, 50) + dbeta(theta.grid, 50, 150) + dbeta(theta.grid, 100, 100)) / 3; qplot(theta.grid, test.trimodal, geom = 'line')
q()
y
source('helper_functions.R')
metropolis.sample.1000 <- do.metropolis.island.sampling(1000)
qplot(metropolis.sample.1000, geom = 'bar')
library(ggplot2)
qplot(metropolis.sample.1000, geom = 'bar')
do.metropolis.island.sampling
metropolis.sample.1000 <- do.metropolis.island.sampling(c(1, 1, 1, 1), 1000)
metropolis.sample.1000
qplot(metropolis.sample.1000, geom = 'bar')
metropolis.sample.1000 <- do.metropolis.island.sampling
args(do.metropolis.island.sampling)
metropolis.sample.1000 <- do.metropolis.island.sampling(c(1, 1, 1, 1), sample.count = 1000)
qplot(metropolis.sample.1000, geom = 'bar')
distrib.fourisland.equal <- c(1, 1, 1, 1)
distrib.fourisland.equal.ideal <- 1000 * (distrib.fourisland.equal / sum(distrib.fourisland.equal))
distrib.fourisland.equal.ideal
qplot(metropolis.sample.1000, geom = 'bar')
qplot(metropolis.sample.1000, geom = 'bar') + geom_bar(aes(x = distrib.fourisland.equal.ideal), colour = 'red')
?geom_bar
qplot(metropolis.sample.1000, geom = 'bar') + geom_bar(data = distrib.fourisland.equal.ideal, colour = 'red')
qplot(metropolis.sample.1000, geom = 'bar') + geom_bar(aes(x = distrib.fourisland.equal.ideal), position = 'dodge')
qplot(metropolis.sample.1000, geom = 'bar')
qplot(metropolis.sample.1000, geom = 'bar') +  geom_bar(aes(distrib.fourisland.equal.ideal))
distrib.fourisland.equal
distrib.fourisland.equal.ideal
qplot(metropolis.sample.1000, geom = 'bar') +  geom_bar(aes(y distrib.fourisland.equal.ideal))
qplot(metropolis.sample.1000, geom = 'bar') +  geom_bar(aes(y = distrib.fourisland.equal.ideal))
qplot(metropolis.sample.1000, geom = 'bar') +  geom_bar(aes(x = 1:length(distrib.fourisland.equal.ideal), y = distrib.fourisland.equal.ideal))
qplot(1:4, c(250, 250, 250, 250), geom = 'bar')
qplot(1:4, c(250, 250, 250, 250), geom = 'bar', stat = 'identity')
qplot(metropolis.sample.1000, geom = 'bar') +  geom_bar(aes(x = 1:length(distrib.fourisland.equal.ideal), y = distrib.fourisland.equal.ideal), stat = 'identity')
qplot(metropolis.sample.1000, geom = 'bar') +  geom_bar(aes(x = 1:length(distrib.fourisland.equal.ideal), y = distrib.fourisland.equal.ideal), stat = 'identity', position = 'dodge')
qplot(metropolis.sample.1000, geom = 'bar') +  geom_bar(aes(x = 1:length(distrib.fourisland.equal.ideal), y = distrib.fourisland.equal.ideal), stat = 'identity', position = 'dodge', colour = 'red')
qplot(metropolis.sample.1000, geom = 'bar') +  geom_bar(aes(x = 1:length(distrib.fourisland.equal.ideal), y = distrib.fourisland.equal.ideal), stat = 'identity', position = 'dodge', fill = 'red')
qplot(1:length(distrib.fourisland.equal.ideal), distrib.fourisland.equal, geom = 'bar', stat = 'identity')
qplot(1:length(distrib.fourisland.equal.ideal), distrib.fourisland.equal, geom = 'bar', stat = 'identity') + geom_bar(aes(metropolis.sample.1000), position = 'dodge')
qplot(1:length(distrib.fourisland.equal.ideal), distrib.fourisland.equal, geom = 'bar', stat = 'identity') + geom_bar(aes(x = metropolis.sample.1000), position = 'dodge')
qplot(1:length(distrib.fourisland.equal.ideal), distrib.fourisland.equal, geom = 'bar', stat = 'identity') + geom_bar(aes(x = metropolis.sample.1000), stat = 'bin', position = 'dodge')
qplot(1:length(distrib.fourisland.equal.ideal), distrib.fourisland.equal, geom = 'bar', stat = 'identity') + geom_bar(aes(metropolis.sample.1000), stat = 'bin', position = 'dodge')
qplot(1:length(distrib.fourisland.equal.ideal), distrib.fourisland.equal, geom = 'bar', stat = 'identity') + geom_bar(data = metropolis.sample.1000, stat = 'bin', position = 'dodge')
qplot(1:length(distrib.fourisland.equal.ideal), distrib.fourisland.equal, geom = 'bar', stat = 'identity') + geom_bar(aes(metropolis.sample.1000), stat = 'bin', position = 'dodge')
qplot(1:length(distrib.fourisland.equal.ideal), distrib.fourisland.equal, geom = 'bar', stat = 'identity') + geom_bar(aes(x = metropolis.sample.1000), stat = 'bin', position = 'dodge')
?aes
qplot(1:length(distrib.fourisland.equal.ideal), distrib.fourisland.equal, geom = 'bar', stat = 'identity') + geom_bar(aes(x = metropolis.sample.1000))
qplot(1:length(distrib.fourisland.equal.ideal), distrib.fourisland.equal, geom = 'bar', stat = 'identity')
qplot(1:length(distrib.fourisland.equal.ideal), distrib.fourisland.equal, geom = 'bar', stat = 'identity', width = 0.5)
qplot(1:length(distrib.fourisland.equal.ideal), distrib.fourisland.equal, geom = 'bar', stat = 'identity', width = 0.1)
qplot(1:length(distrib.fourisland.equal.ideal), distrib.fourisland.equal, geom = 'bar', stat = 'identity', width = 0.1, position = 'dodge')
qplot(1:length(distrib.fourisland.equal.ideal), distrib.fourisland.equal, geom = 'bar', stat = 'identity', width = 0.1, position = 'dodge') + geom_bar(aes(x = metropolis.sample.1000))
qplot(1:length(distrib.fourisland.equal.ideal), distrib.fourisland.equal, geom = 'bar', stat = 'identity', width = 0.1, position = 'dodge') + geom_bar(aes(x = metropolis.sample.1000), stat = 'bin')
qplot(1:length(distrib.fourisland.equal.ideal), distrib.fourisland.equal, geom = 'bar', stat = 'identity', width = 0.1, position = 'dodge') + stat_summary(fun.y = 'length', geom = 'bar')
?stat_summary
qplot(1:length(distrib.fourisland.equal.ideal), distrib.fourisland.equal, geom = 'bar', stat = 'identity', width = 0.1, position = 'dodge') + stat_summary(aes(metropolis.sample.1000), fun.y = 'length', geom = 'bar')
c(rep(1, 250), rep(2, 250), rep(3, 250), rep(4, 250))
distrib.fourisland.equal.ideal <- c(rep(1, 250), rep(2, 250), rep(3, 250), rep(4, 250))
qplot(distrib.fourisland.equal, geom = 'bar', width = 0.1, position = 'dodge') + stat_summary(aes(metropolis.sample.1000), fun.y = 'length', geom = 'bar')
qplot(distrib.fourisland.equal, geom = 'bar', width = 0.1, position = 'dodge')
distrib.fourisland.equal.ideal
qplot(distrib.fourisland.equal.ideal, geom = 'bar', width = 0.1, position = 'dodge')
qplot(distrib.fourisland.equal.ideal, geom = 'bar', width = 0.1, position = 'dodge') + geom_bar(aes(metropolis.sample.1000))
qplot(distrib.fourisland.equal.ideal, geom = 'bar', width = 0.1, position = 'dodge') + geom_bar(aes(metropolis.sample.1000), fill = 'red')
qplot(distrib.fourisland.equal.ideal, geom = 'bar', width = 0.1, position = 'dodge') + geom_bar(aes(metropolis.sample.1000), fill = 'red', position = 'dodge')
qplot(distrib.fourisland.equal.ideal, geom = 'bar', width = 0.1) + geom_bar(aes(metropolis.sample.1000), fill = 'red', position = 'dodge')
qplot(distrib.fourisland.equal.ideal, geom = 'bar', width = 0.1) + geom_bar(aes(metropolis.sample.1000), fill = 'red')
qplot(distrib.fourisland.equal.ideal, geom = 'bar', width = 0.1) + geom_bar(aes(metropolis.sample.1000), fill = 'red', position = 'dodge')
qplot(distrib.fourisland.equal.ideal, geom = 'bar', width = 0.1) + geom_bar(aes(metropolis.sample.1000), fill = 'red')
qplot(distrib.fourisland.equal.ideal, geom = 'bar', width = 0.1) + geom_bar(aes(metropolis.sample.1000), fill = 'red') + geom_bar(position = 'dodge')
rbind(data.frame(label = 'ideal', value = distrib.fourisland.equal.ideal), data.frame(label = 'sample', value = metropolis.sample.1000))
qplot(value, data = rbind(data.frame(label = 'ideal', value = distrib.fourisland.equal.ideal), data.frame(label = 'sample', value = metropolis.sample.1000)), colour = label, position = 'dodge', geom = 'bar')
qplot(value, data = rbind(data.frame(label = 'ideal', value = distrib.fourisland.equal.ideal), data.frame(label = 'sample', value = metropolis.sample.1000)), fill = label, position = 'dodge', geom = 'bar')
do.metropolis.island.sampling
test.distrib <- c(1, 1, 1, 1);
test.distrib <- test.distrib / sum(test.distrib);
metropolis.sample.1000 <- do.metropolis.island.sampling(test.distrib, sample.count = 1000);
distrib.ideal <- unlist(llply(1:length(test.distrib), function(idx) rep(idx, test.distrib[idx] * 1000)));
library(plyr)
test.distrib <- c(1, 1, 1, 1);
test.distrib <- test.distrib / sum(test.distrib);
metropolis.sample.1000 <- do.metropolis.island.sampling(test.distrib, sample.count = 1000);
distrib.ideal <- unlist(llply(1:length(test.distrib), function(idx) rep(idx, test.distrib[idx] * 1000)));
distrib.ideal
length(distrib.ideal)
plot.df <- rbind(data.frame(label = 'ideal',  island = distrib.ideal),
                 data.frame(label = 'sample', island = metropolis.sample.1000));
qplot(island, data = plot.df, fill = label, position = 'dodge', geom = 'bar')
plot.df <- rbind(data.frame(label = 'ideal',  island = distrib.ideal),
                 data.frame(label = 'sample', island = metropolis.sample.1000));
qplot(island, data = plot.df, fill = label, position = 'dodge', geom = 'bar')
plot.df <- rbind(data.frame(label = 'ideal',  island = distrib.ideal),
                 data.frame(label = 'sample', island = metropolis.sample.1000));
qplot(island, data = plot.df, fill = label, position = 'dodge', geom = 'bar')
metropolis.sample.1000 <- do.metropolis.island.sampling(test.distrib, sample.count = 1000);
distrib.ideal <- unlist(llply(1:length(test.distrib), function(idx) rep(idx, test.distrib[idx] * 1000)));
plot.df <- rbind(data.frame(label = 'ideal',  island = distrib.ideal),
                 data.frame(label = 'sample', island = metropolis.sample.1000));
qplot(island, data = plot.df, fill = label, position = 'dodge', geom = 'bar')
metropolis.sample.1000 <- do.metropolis.island.sampling(test.distrib, sample.count = 1000);
distrib.ideal <- unlist(llply(1:length(test.distrib), function(idx) rep(idx, test.distrib[idx] * 1000)));
plot.df <- rbind(data.frame(label = 'ideal',  island = distrib.ideal),
                 data.frame(label = 'sample', island = metropolis.sample.1000));
qplot(island, data = plot.df, fill = label, position = 'dodge', geom = 'bar')
metropolis.sample.1000 <- do.metropolis.island.sampling(test.distrib, sample.count = 1000);
distrib.ideal <- unlist(llply(1:length(test.distrib), function(idx) rep(idx, test.distrib[idx] * 1000)));
plot.df <- rbind(data.frame(label = 'ideal',  island = distrib.ideal),
                 data.frame(label = 'sample', island = metropolis.sample.1000));
qplot(island, data = plot.df, fill = label, position = 'dodge', geom = 'bar')
metropolis.sample.1000 <- do.metropolis.island.sampling(test.distrib, sample.count = 1000);
distrib.ideal <- unlist(llply(1:length(test.distrib), function(idx) rep(idx, test.distrib[idx] * 1000)));
plot.df <- rbind(data.frame(label = 'ideal',  island = distrib.ideal),
                 data.frame(label = 'sample', island = metropolis.sample.1000));
qplot(island, data = plot.df, fill = label, geom = 'bar')
metropolis.sample.1000 <- do.metropolis.island.sampling(test.distrib, sample.count = 1000);
distrib.ideal <- unlist(llply(1:length(test.distrib), function(idx) rep(idx, test.distrib[idx] * 1000)));
plot.df <- rbind(data.frame(label = 'ideal',  island = distrib.ideal),
                 data.frame(label = 'sample', island = metropolis.sample.1000));
?position_dodge
?position_fill
?position_stack
?position_jitter
plot.df <- rbind(data.frame(label = 'ideal',  island = distrib.ideal),
                 data.frame(label = 'sample', island = metropolis.sample.1000));
qplot(island, data = plot.df, fill = label, position = 'dodge', geom = 'bar')
plot.df <- rbind(data.frame(label = 'ideal',  island = distrib.ideal),
                 data.frame(label = 'sample', island = metropolis.sample.1000));
qplot(island, data = plot.df, fill = label, position = 'dodge', geom = 'bar')
plot.df <- rbind(data.frame(label = 'ideal',  island = distrib.ideal),
                 data.frame(label = 'sample', island = metropolis.sample.1000));
qplot(island, data = plot.df, fill = label, position = 'dodge', geom = 'bar')
metropolis.sample.1000 <- do.metropolis.island.sampling(test.distrib, sample.count = 1000);
distrib.ideal <- unlist(llply(1:length(test.distrib), function(idx) rep(idx, test.distrib[idx] * 1000)));
plot.df <- rbind(data.frame(label = 'ideal',  island = distrib.ideal),
                 data.frame(label = 'sample', island = metropolis.sample.1000));
qplot(island, data = plot.df, fill = label, position = 'dodge', geom = 'bar')
test.distrib <- 1:7 / sum(1:7);
metropolis.sample.1000 <- do.metropolis.island.sampling(test.distrib, sample.count = 1000);
distrib.ideal <- unlist(llply(1:length(test.distrib), function(idx) rep(idx, test.distrib[idx] * 1000)));
plot.df <- rbind(data.frame(label = 'ideal',  island = distrib.ideal),
                 data.frame(label = 'sample', island = metropolis.sample.1000));
qplot(island, data = plot.df, fill = label, position = 'dodge', geom = 'bar')
test.distrib <- 1:7 / sum(1:7);
metropolis.sample.1000 <- do.metropolis.island.sampling(test.distrib, sample.count = 1000);
distrib.ideal <- unlist(llply(1:length(test.distrib), function(idx) rep(idx, test.distrib[idx] * 1000)));
plot.df <- rbind(data.frame(label = 'ideal',  island = distrib.ideal),
                 data.frame(label = 'sample', island = metropolis.sample.1000));
qplot(island, data = plot.df, fill = label, position = 'dodge', geom = 'bar')
test.distrib <- 1:7 / sum(1:7);
metropolis.sample.1000 <- do.metropolis.island.sampling(test.distrib, sample.count = 1000);
distrib.ideal <- unlist(llply(1:length(test.distrib), function(idx) rep(idx, test.distrib[idx] * 1000)));
plot.df <- rbind(data.frame(label = 'ideal',  island = distrib.ideal),
                 data.frame(label = 'sample', island = metropolis.sample.1000));
qplot(island, data = plot.df, fill = label, position = 'dodge', geom = 'bar')
test.distrib <- 1:7 / sum(1:7);
metropolis.sample.1000 <- do.metropolis.island.sampling(test.distrib, sample.count = 1000);
distrib.ideal <- unlist(llply(1:length(test.distrib), function(idx) rep(idx, test.distrib[idx] * 1000)));
plot.df <- rbind(data.frame(label = 'ideal',  island = distrib.ideal),
                 data.frame(label = 'sample', island = metropolis.sample.1000));
qplot(island, data = plot.df, fill = label, position = 'dodge', geom = 'bar')
test.distrib <- 1:7 / sum(1:7);
metropolis.sample.10000 <- do.metropolis.island.sampling(test.distrib, sample.count = 10000);
distrib.ideal <- unlist(llply(1:length(test.distrib), function(idx) rep(idx, test.distrib[idx] * 10000)));
plot.df <- rbind(data.frame(label = 'ideal',  island = distrib.ideal),
                 data.frame(label = 'sample', island = metropolis.sample.1000));
qplot(island, data = plot.df, fill = label, position = 'dodge', geom = 'bar')
test.distrib <- 1:7 / sum(1:7);
metropolis.sample.10000 <- do.metropolis.island.sampling(test.distrib, sample.count = 10000);
distrib.ideal <- unlist(llply(1:length(test.distrib), function(idx) rep(idx, test.distrib[idx] * 10000)));
plot.df <- rbind(data.frame(label = 'ideal',  island = distrib.ideal),
                 data.frame(label = 'sample', island = metropolis.sample.10000));
qplot(island, data = plot.df, fill = label, position = 'dodge', geom = 'bar');
disease.twotest.data <- generate.disease.twotest.data(n = 1000000, prior.prob = 0.001, hit.rate.1 = 0.99, false.alarm.1 = 0.05, hit.rate.2 = 0.99, false.alarm.2 = 0.05);
disease.twotest.data[, 1:10]   # Look at the first 10 columns of the data to get an idea of the layout
calc.twotest.prob <- function(data) {
    infected <- data['infected', ]; test.1 <- data['test.1', ]; test.2 <- data['test.2', ];
    return(length(data[infected == 1 & test.1 == 1 & test.2 == 1]) / length(data[test.1 == 1 & test.2 == 1]));
}
calc.twotest.prob(disease.twotest.data);
twotest.df <- ddply(expand.grid(fa1 = fa.prob.vector, fa2 = fa.prob.vector),
                    .(fa1, fa2),
                    function(df) calc.twotest.prob(generate.disease.twotest.data(false.alarm.1 = df$fa1, false.alarm.2 = df$fa2)));
qplot(fa1, fa2, z = V1, data = twotest.df, geom = 'contour', colour = ..level..) + scale_x_log10() + scale_y_log10();
df
twotest.df
persp(twotest.df$fa1, twotest.df$fa2, twotest.df$V1)
?persp
matrix(twotest.df$V1)
matrix(twotest.df$V1, ncol = length(unique(twotest.df$fa1)))
persp(z = matrix(twotest.df$V1, ncol = length(unique(twotest.df$fa1))))
persp(x = unique(twotest.df$fa1), z = matrix(twotest.df$V1, ncol = length(unique(twotest.df$fa1))))
persp(x = sort(unique(twotest.df$fa1)), y = sort(unique(twotest.df$fa2)), z = matrix(twotest.df$V1, ncol = length(unique(twotest.df$fa1))))
persp(x = sort(unique(twotest.df$fa1)), y = sort(unique(twotest.df$fa2)), z = matrix(twotest.df$V1, ncol = length(unique(twotest.df$fa1))), phi = 45, theta = 45)
persp(x = sort(unique(twotest.df$fa1)), y = sort(unique(twotest.df$fa2)), z = matrix(twotest.df$V1, ncol = length(unique(twotest.df$fa1))), phi = 30, theta = 30)
persp(x = sort(unique(twotest.df$fa1)), y = sort(unique(twotest.df$fa2)), z = matrix(twotest.df$V1, ncol = length(unique(twotest.df$fa1))), phi = 0, theta = 30)
persp(x = sort(unique(twotest.df$fa1)), y = sort(unique(twotest.df$fa2)), z = matrix(twotest.df$V1, ncol = length(unique(twotest.df$fa1))), phi = 0, theta = 60)
persp(x = sort(unique(twotest.df$fa1)), y = sort(unique(twotest.df$fa2)), z = matrix(twotest.df$V1, ncol = length(unique(twotest.df$fa1))), phi = 0, theta = 45)
persp(x = log(sort(unique(twotest.df$fa1))), y = log(sort(unique(twotest.df$fa2))), z = matrix(twotest.df$V1, ncol = length(unique(twotest.df$fa1))), phi = 0, theta = 45)
persp(x = log(sort(unique(twotest.df$fa1))), y = log(sort(unique(twotest.df$fa2))), z = matrix(twotest.df$V1, ncol = length(unique(twotest.df$fa1))), phi = 15, theta = 45)
persp(x = log(sort(unique(twotest.df$fa1))), y = log(sort(unique(twotest.df$fa2))), z = matrix(twotest.df$V1, ncol = length(unique(twotest.df$fa1))), phi = -15, theta = 45)
persp(x = log(sort(unique(twotest.df$fa1))), y = log(sort(unique(twotest.df$fa2))), z = matrix(twotest.df$V1, ncol = length(unique(twotest.df$fa1))), phi = 0, theta = 15)
?persp
twotest.matrix <- matrix(twotest.df$V1, ncol = length(fa.prob.vector))
twotest.matrix
persp(x = log(fa.prob.vector), y = log(fa.prob.vector), z = twotest.matrix, phi = 0, theta = 15)
persp(x = log(fa.prob.vector), y = log(fa.prob.vector), z = twotest.matrix, phi = 0, theta = 30)
persp(x = log(fa.prob.vector), y = log(fa.prob.vector), z = twotest.matrix, phi = 30, theta = 30)
persp(x = log(fa.prob.vector), y = log(fa.prob.vector), z = twotest.matrix, phi = 30, theta = 60)
persp(x = fa.prob.vector, y = fa.prob.vector, z = twotest.matrix, phi = 30, theta = 60)
persp(x = fa.prob.vector, y = fa.prob.vector, z = twotest.matrix, phi = 60, theta = 60)
persp(x = fa.prob.vector, y = fa.prob.vector, z = twotest.matrix, phi = 15, theta = 60)
persp(x = fa.prob.vector, y = fa.prob.vector, z = twotest.matrix, phi = 15, theta = 75)
persp(x = fa.prob.vector, y = fa.prob.vector, z = twotest.matrix, phi = 15, theta = 45)
persp(x = fa.prob.vector, y = fa.prob.vector, z = twotest.matrix, phi = 75, theta = 45)
persp(x = fa.prob.vector, y = fa.prob.vector, z = twotest.matrix, phi = 60, theta = 45)
persp(x = fa.prob.vector, y = fa.prob.vector, z = twotest.matrix, phi = 30, theta = 45)
?persp
persp(x = fa.prob.vector, y = fa.prob.vector, z = twotest.matrix, phi = 30, theta = 45, xlim = c(0, 1), ylim = c(0, 1))
persp(x = fa.prob.vector, y = fa.prob.vector, z = twotest.matrix, phi = 30, theta = 45, xlim = c(0, 1), ylim = c(0, 1))
twotest.matrix <- matrix(twotest.df$V1, ncol = length(fa.prob.vector));
persp(x = fa.prob.vector, y = fa.prob.vector, z = twotest.matrix, phi = 30, theta = 45, xlim = c(0, 1), ylim = c(0, 1));
twotest.matrix <- matrix(twotest.df$V1, ncol = length(fa.prob.vector));
persp(x = fa.prob.vector, y = fa.prob.vector, z = twotest.matrix, phi = 30, theta = 45, xlim = c(0, 1), ylim = c(0, 1));
q()
y
library(ggplot2)
theta.grid
lsos()
source("sample_exercise_code.R")
qplot(theta.grid, trimodal.prior, geom = 'line')
q()
trimodal.prior.10     <- (dbeta(theta.grid, 30, 10) + dbeta(theta.grid, 10, 30) + dbeta(theta.grid, 20, 20)) / 3;

trimodal.prior     <- (dbeta(theta.grid, 3000, 1000) + dbeta(theta.grid, 1000, 3000) + dbeta(theta.grid, 2000, 2000)) / 3;
qplot(theta.grid, trimodal.prior, geom = 'line')
library(ggplot2)
qplot(theta.grid, trimodal.prior, geom = 'line')
trimodal.prior
q()
y
lsos()
ls()
### We will be using ggplot2 for the graphing and plyr for some of the data management
require(ggplot2);
require(reshape2);
require(plyr);
require(gridExtra);


### Source in the helper functions code
source('helper_functions.R');


lsos()
### We will be using ggplot2 for the graphing and plyr for some of the data management
require(ggplot2);
require(reshape2);
require(plyr);
require(gridExtra);
require(rjags);


### Source in the helper functions code
source('helper_functions.R');

twocoin.data <- readRDS('singlemint_twocoin.rds');

use.data <- twocoin.data;
sample.count <- 10000;

chain.count  <- 5;
adapt.steps  <- 500;
burnin.steps <- 1000;

jags.file <- 'singlemint_multiplecoin.jag';


### First we set up the model and check the priors
jagsPriorModel <- jags.model(jags.file, data = list(nCoins = length(unique(use.data['coinidx', ])), nFlips = dim(use.data)[2]), n.chains = chain.count, n.adapt = adapt.steps);

update(jagsPriorModel, n.iter = burnin.steps);

coda.prior.sample.data <- coda.samples(jagsPriorModel, variable.names = c('mu', 'theta'), n.iter = sample.count);
mcmc.prior.samples     <- as.matrix(coda.prior.sample.data);

### Prior data can be plotted directly
plot(coda.prior.sample.data)


jagsPosteriorModel <- jags.model(jags.file, data = list(nCoins = length(unique(use.data['coinidx', ])), nFlips = length(use.data), y = use.data['tossdata', ]), n.chains = chain.count, n.adapt = adapt.steps);

update(jagsPosteriorModel, n.iter = burnin.steps);

coda.posterior.sample.data <- coda.samples(jagsPosteriorModel, variable.names = c('mu', 'theta'), n.iter = sample.count);
mcmc.posterior.samples     <- as.matrix(coda.posterior.sample.data);

### Posterior data can be plotted directly
plot(coda.posterior.sample.data)

jagsPriorModel <- jags.model(jags.file, data = list(nCoins = length(unique(use.data['coinidx', ])), nFlips = dim(use.data)[2]), n.chains = chain.count, n.adapt = adapt.steps);

use.data
twocoin.data <- readRDS('singlemint_twocoin.rds');

use.data <- twocoin.data;
sample.count <- 10000;

chain.count  <- 5;
adapt.steps  <- 500;
burnin.steps <- 1000;

jags.file <- 'singlemint_multiplecoin.jag';


### First we set up the model and check the priors
jagsPriorModel <- jags.model(jags.file, data = list(nCoins = length(unique(use.data['coinidx', ])), nFlips = dim(use.data)[2], coin = use.data['coinidx', ]), n.chains = chain.count, n.adapt = adapt.steps);

update(jagsPriorModel, n.iter = burnin.steps);

coda.prior.sample.data <- coda.samples(jagsPriorModel, variable.names = c('mu', 'theta'), n.iter = sample.count);
mcmc.prior.samples     <- as.matrix(coda.prior.sample.data);

### Prior data can be plotted directly
plot(coda.prior.sample.data)


jagsPosteriorModel <- jags.model(jags.file, data = list(nCoins = length(unique(use.data['coinidx', ])), nFlips = length(use.data), coin = use.data['coinidx', ], y = use.data['tossdata', ]), n.chains = chain.count, n.adapt = adapt.steps);

update(jagsPosteriorModel, n.iter = burnin.steps);

coda.posterior.sample.data <- coda.samples(jagsPosteriorModel, variable.names = c('mu', 'theta'), n.iter = sample.count);
mcmc.posterior.samples     <- as.matrix(coda.posterior.sample.data);

### Posterior data can be plotted directly
plot(coda.posterior.sample.data)

twocoin.data <- readRDS('singlemint_twocoin.rds');

use.data <- twocoin.data;
sample.count <- 10000;

chain.count  <- 5;
adapt.steps  <- 500;
burnin.steps <- 1000;

jags.file <- 'singlemint_multiplecoin.jag';


### First we set up the model and check the priors
jagsPriorModel <- jags.model(jags.file, data = list(nCoins = length(unique(use.data['coinidx', ])), nTrialTotal = dim(use.data)[2], coin = use.data['coinidx', ]), n.chains = chain.count, n.adapt = adapt.steps);

update(jagsPriorModel, n.iter = burnin.steps);

coda.prior.sample.data <- coda.samples(jagsPriorModel, variable.names = c('mu', 'theta'), n.iter = sample.count);
mcmc.prior.samples     <- as.matrix(coda.prior.sample.data);

### Prior data can be plotted directly
plot(coda.prior.sample.data)


jagsPosteriorModel <- jags.model(jags.file, data = list(nCoins = length(unique(use.data['coinidx', ])), nTrialTotal = length(use.data), coin = use.data['coinidx', ], y = use.data['tossdata', ]), n.chains = chain.count, n.adapt = adapt.steps);

update(jagsPosteriorModel, n.iter = burnin.steps);

coda.posterior.sample.data <- coda.samples(jagsPosteriorModel, variable.names = c('mu', 'theta'), n.iter = sample.count);
mcmc.posterior.samples     <- as.matrix(coda.posterior.sample.data);

### Posterior data can be plotted directly
plot(coda.posterior.sample.data)

jagsPriorModel <- jags.model(jags.file, data = list(nTrialTotal = dim(use.data)[2],
                                                    nCoins      = length(unique(use.data['coinidx', ])),
                                                    coin        = use.data['coinidx', ]),
                             n.chains = chain.count, n.adapt = adapt.steps);

jagsPosteriorModel <- jags.model(jags.file, data = list(nTrialTotal = dim(use.data)[2],
                                                        nCoins      = length(unique(use.data['coinidx', ])),
                                                        coin        = use.data['coinidx', ],
                                                        y           = use.data['tossdata', ]),
                                 n.chains = chain.count, n.adapt = adapt.steps);

twocoin.data <- readRDS('singlemint_twocoin.rds');

use.data <- twocoin.data;
sample.count <- 10000;

chain.count  <- 5;
adapt.steps  <- 500;
burnin.steps <- 1000;

jags.file <- 'singlemint_multiplecoin.jag';


### First we set up the model and check the priors
jagsPriorModel <- jags.model(jags.file, data = list(nTrialTotal = dim(use.data)[2],
                                                    nCoins      = length(unique(use.data['coinidx', ])),
                                                    coin        = use.data['coinidx', ]),
                             n.chains = chain.count, n.adapt = adapt.steps);

update(jagsPriorModel, n.iter = burnin.steps);

coda.prior.sample.data <- coda.samples(jagsPriorModel, variable.names = c('mu', 'theta'), n.iter = sample.count);
mcmc.prior.samples     <- as.matrix(coda.prior.sample.data);

### Prior data can be plotted directly
plot(coda.prior.sample.data)


jagsPosteriorModel <- jags.model(jags.file, data = list(nTrialTotal = dim(use.data)[2],
                                                        nCoins      = length(unique(use.data['coinidx', ])),
                                                        coin        = use.data['coinidx', ],
                                                        y           = use.data['tossdata', ]),
                                 n.chains = chain.count, n.adapt = adapt.steps);

update(jagsPosteriorModel, n.iter = burnin.steps);

coda.posterior.sample.data <- coda.samples(jagsPosteriorModel, variable.names = c('mu', 'theta'), n.iter = sample.count);
mcmc.posterior.samples     <- as.matrix(coda.posterior.sample.data);

### Posterior data can be plotted directly
plot(coda.posterior.sample.data)

lsos()
rm(list = ls())
source('helper_functions.R')
twocoin.data <- readRDS('singlemint_twocoin.rds');

use.data <- twocoin.data;
sample.count <- 10000;

chain.count  <- 5;
adapt.steps  <- 500;
burnin.steps <- 1000;

jags.file <- 'singlemint_multiplecoin.jag';


### First we set up the model and check the priors
jagsPriorModel <- jags.model(jags.file, data = list(nTrialTotal = dim(use.data)[2],
                                                    nCoins      = length(unique(use.data['coinidx', ])),
                                                    coin        = use.data['coinidx', ]),
                             n.chains = chain.count, n.adapt = adapt.steps);

update(jagsPriorModel, n.iter = burnin.steps);

coda.prior.sample.data <- coda.samples(jagsPriorModel, variable.names = c('mu', 'theta'), n.iter = sample.count);
mcmc.prior.samples     <- as.matrix(coda.prior.sample.data);

### Prior data can be plotted directly
plot(coda.prior.sample.data)


jagsPosteriorModel <- jags.model(jags.file, data = list(nTrialTotal = dim(use.data)[2],
                                                        nCoins      = length(unique(use.data['coinidx', ])),
                                                        coin        = use.data['coinidx', ],
                                                        y           = use.data['tossdata', ]),
                                 n.chains = chain.count, n.adapt = adapt.steps);

update(jagsPosteriorModel, n.iter = burnin.steps);

coda.posterior.sample.data <- coda.samples(jagsPosteriorModel, variable.names = c('mu', 'theta'), n.iter = sample.count);
mcmc.posterior.samples     <- as.matrix(coda.posterior.sample.data);

### Posterior data can be plotted directly
plot(coda.posterior.sample.data)

rbeta(5, 100, 100)
rbeta(5, 20, 20)
?rbinom
sapply(rbeta(5, 20, 20), function(theta) rbinom(20, theta))
?rbinom
sapply(rbeta(5, 20, 20), function(theta) rbinom(1, 20, theta))
sapply(rbeta(5, 20, 20), function(theta) rbinom(20, 1, theta))
as.vector(sapply(rbeta(5, 20, 20), function(theta) rbinom(20, 1, theta)))
lapply(rbeta(5, 20, 20), function(theta) rbinom(20, 1, theta))
unlist(lapply(rbeta(5, 20, 20), function(theta) rbinom(20, 1, theta)))
lapply(rbeta(5, 20, 20), function(theta) rbinom(20, 1, theta))
test <- lapply(rbeta(5, 20, 20), function(theta) rbinom(20, 1, theta))
test
unlist(test)
rep(1:5, 20)
?rep
generate.hierarchical.coin.data
generate.hierarchical.coin.data(0.5, K = 10, coins = 5, total.tosses = 100)
generate.hierarchical.coin.data(0.5, K = 10, coins = 5, total.tosses = 100)[2:3,]
cointoss.fivecoin <- generate.hierarchical.coin.data(0.5, K = 10, coins = 5, total.tosses = 100)[2:3,]
saveRDS(cointoss.fivecoin, file = 'cointoss_fivecoin.rds')
fivecoin.data <- readRDS('singlemint_fivecoin.rds');

use.data <- fivecoin.data;
sample.count <- 10000;

chain.count  <- 5;
adapt.steps  <- 500;
burnin.steps <- 1000;

jags.file <- 'singlemint_multiplecoin.jag';


### First we set up the model and check the priors
jagsPriorModel <- jags.model(jags.file, data = list(nTrialTotal = dim(use.data)[2],
                                                    nCoins      = length(unique(use.data['coinidx', ])),
                                                    coin        = use.data['coinidx', ]),
                             n.chains = chain.count, n.adapt = adapt.steps);

update(jagsPriorModel, n.iter = burnin.steps);

coda.prior.sample.data <- coda.samples(jagsPriorModel, variable.names = c('mu', 'theta'), n.iter = sample.count);
mcmc.prior.samples     <- as.matrix(coda.prior.sample.data);

### Prior data can be plotted directly
plot(coda.prior.sample.data)


jagsPosteriorModel <- jags.model(jags.file, data = list(nTrialTotal = dim(use.data)[2],
                                                        nCoins      = length(unique(use.data['coinidx', ])),
                                                        coin        = use.data['coinidx', ],
                                                        y           = use.data['tossdata', ]),
                                 n.chains = chain.count, n.adapt = adapt.steps);

update(jagsPosteriorModel, n.iter = burnin.steps);

coda.posterior.sample.data <- coda.samples(jagsPosteriorModel, variable.names = c('mu', 'theta'), n.iter = sample.count);
mcmc.posterior.samples     <- as.matrix(coda.posterior.sample.data);

### Posterior data can be plotted directly
plot(coda.posterior.sample.data)



fiveco
fivecoin.data
rownames(fivecoin.data)
lsos()
twocoin.data
rownames(twocoin.data)
rownames(twocoin.data) <- c('coin', 'cointoss')
twocoin.data
saveRDS(twocoin.data, file = 'singlemint_twocoin.rds')
rm(twocoin.data)
twocoin.data <- readRDS('singlemint_twocoin.rds')
twocoin.data
rm(list = ls())
twocoin.data <- readRDS('singlemint_twocoin.rds');

use.data <- twocoin.data;
sample.count <- 10000;

chain.count  <- 5;
adapt.steps  <- 500;
burnin.steps <- 1000;

jags.file <- 'singlemint_multiplecoin.jag';


### First we set up the model and check the priors
jagsPriorModel <- jags.model(jags.file, data = list(nTrialTotal = dim(use.data)[2],
                                                    nCoins      = length(unique(use.data['coin', ])),
                                                    coin        = use.data['coin', ]),
                             n.chains = chain.count, n.adapt = adapt.steps);

update(jagsPriorModel, n.iter = burnin.steps);

coda.prior.sample.data <- coda.samples(jagsPriorModel, variable.names = c('mu', 'theta'), n.iter = sample.count);
mcmc.prior.samples     <- as.matrix(coda.prior.sample.data);

### Prior data can be plotted directly
plot(coda.prior.sample.data)


jagsPosteriorModel <- jags.model(jags.file, data = list(nTrialTotal = dim(use.data)[2],
                                                        nCoins      = length(unique(use.data['coin', ])),
                                                        coin        = use.data['coin', ],
                                                        y           = use.data['cointoss', ]),
                                 n.chains = chain.count, n.adapt = adapt.steps);

update(jagsPosteriorModel, n.iter = burnin.steps);

coda.posterior.sample.data <- coda.samples(jagsPosteriorModel, variable.names = c('mu', 'theta'), n.iter = sample.count);
mcmc.posterior.samples     <- as.matrix(coda.posterior.sample.data);

### Posterior data can be plotted directly
plot(coda.posterior.sample.data)

#########################################################################################################
#########################################################################################################
###
### Exercise 6.8
###
#########################################################################################################
#########################################################################################################

fivecoin.data <- readRDS('singlemint_fivecoin.rds');

use.data <- fivecoin.data;
sample.count <- 10000;

chain.count  <- 5;
adapt.steps  <- 500;
burnin.steps <- 1000;

jags.file <- 'singlemint_multiplecoin.jag';


### First we set up the model and check the priors
jagsPriorModel <- jags.model(jags.file, data = list(nTrialTotal = dim(use.data)[2],
                                                    nCoins      = length(unique(use.data['coin', ])),
                                                    coin        = use.data['coin', ]),
                             n.chains = chain.count, n.adapt = adapt.steps);

update(jagsPriorModel, n.iter = burnin.steps);

coda.prior.sample.data <- coda.samples(jagsPriorModel, variable.names = c('mu', 'theta'), n.iter = sample.count);
mcmc.prior.samples     <- as.matrix(coda.prior.sample.data);

### Prior data can be plotted directly
plot(coda.prior.sample.data)


jagsPosteriorModel <- jags.model(jags.file, data = list(nTrialTotal = dim(use.data)[2],
                                                        nCoins      = length(unique(use.data['coin', ])),
                                                        coin        = use.data['coin', ],
                                                        y           = use.data['cointoss', ]),
                                 n.chains = chain.count, n.adapt = adapt.steps);

update(jagsPosteriorModel, n.iter = burnin.steps);

coda.posterior.sample.data <- coda.samples(jagsPosteriorModel, variable.names = c('mu', 'theta'), n.iter = sample.count);
mcmc.posterior.samples     <- as.matrix(coda.posterior.sample.data);

### Posterior data can be plotted directly
plot(coda.posterior.sample.data)



plot(coda.prior.sample.data)
?coda.samples
jags.plot
?plot.jags
rjags:::print.jags
print(coda.prior.sample.data)
str(coda.prior.sample.data)
plot.mcmc
?plot
methods(plot)
plot.mcmc.list
?plot.mcmc.list
?plot.mcmc.list[21]
?methods
methods(plot, mcmc)
methods(plot, "mcmc")
??plot.mcmc
lsos()
summary(coda.prior.sample.data)
plot(coda.posterior.sample.data)
?coda::plot
?coda::plot.mcmc.lst
?coda:::plot.mcmc.lst
coda:::plot.mcmc.lst
coda:::plot.mcmc.list
plot(coda.posterior.sample.data, ask = TRUE)
plot(coda.posterior.sample.data, ask = TRUE, auto.layout = FALSE)
plot(coda.posterior.sample.data, ask = TRUE, nrows = 6)
plot(coda.posterior.sample.data, ask = TRUE, nrow = 6)
lsos()
twocoin.data <- readRDS('singlemint_twocoin.rds');

use.data <- twocoin.data;
sample.count <- 10000;

chain.count  <- 5;
adapt.steps  <- 500;
burnin.steps <- 1000;

jags.file <- 'singlemint_full.jag';


### First we set up the model and check the priors
jagsPriorModel <- jags.model(jags.file, data = list(nTrialTotal = dim(use.data)[2],
                                                    nCoins      = length(unique(use.data['coin', ])),
                                                    coin        = use.data['coin', ]),
                             n.chains = chain.count, n.adapt = adapt.steps);

update(jagsPriorModel, n.iter = burnin.steps);

coda.prior.sample.data <- coda.samples(jagsPriorModel, variable.names = c('mu', 'theta'), n.iter = sample.count);
mcmc.prior.samples     <- as.matrix(coda.prior.sample.data);

### Prior data can be plotted directly
plot(coda.prior.sample.data)


jagsPosteriorModel <- jags.model(jags.file, data = list(nTrialTotal = dim(use.data)[2],
                                                        nCoins      = length(unique(use.data['coin', ])),
                                                        coin        = use.data['coin', ],
                                                        y           = use.data['cointoss', ]),
                                 n.chains = chain.count, n.adapt = adapt.steps);

update(jagsPosteriorModel, n.iter = burnin.steps);

coda.posterior.sample.data <- coda.samples(jagsPosteriorModel, variable.names = c('mu', 'theta'), n.iter = sample.count);
mcmc.posterior.samples     <- as.matrix(coda.posterior.sample.data);

### Posterior data can be plotted directly
plot(coda.posterior.sample.data)

### First we set up the model and check the priors
jagsPriorModel <- jags.model(jags.file, data = list(nTrialTotal = dim(use.data)[2],
                                                    nCoins      = length(unique(use.data['coin', ])),
                                                    coin        = use.data['coin', ]),
                             n.chains = chain.count, n.adapt = adapt.steps);

update(jagsPriorModel, n.iter = burnin.steps);

coda.prior.sample.data <- coda.samples(jagsPriorModel, variable.names = c('mu', 'kappa', 'theta'), n.iter = sample.count);
mcmc.prior.samples     <- as.matrix(coda.prior.sample.data);

### Prior data can be plotted directly
plot(coda.prior.sample.data)


jagsPosteriorModel <- jags.model(jags.file, data = list(nTrialTotal = dim(use.data)[2],
                                                        nCoins      = length(unique(use.data['coin', ])),
                                                        coin        = use.data['coin', ],
                                                        y           = use.data['cointoss', ]),
                                 n.chains = chain.count, n.adapt = adapt.steps);

update(jagsPosteriorModel, n.iter = burnin.steps);

coda.posterior.sample.data <- coda.samples(jagsPosteriorModel, variable.names = c('mu', 'kappa', 'theta'), n.iter = sample.count);
mcmc.posterior.samples     <- as.matrix(coda.posterior.sample.data);

### Posterior data can be plotted directly
plot(coda.posterior.sample.data)

qplot(mcmc.prior.samples[, 'kappa'], geom = 'density') + geom_density(aes(x = mcmc.posterior.samples[, 'kappa']), colour = 'red')
twocoin.data <- readRDS('singlemint_twocoin.rds');

use.data <- twocoin.data;
sample.count <- 10000;

chain.count  <- 5;
adapt.steps  <- 500;
burnin.steps <- 1000;

jags.file <- 'singlemint_multiplecoin.jag';


### First we set up the model and check the priors
jagsPriorModel <- jags.model(jags.file, data = list(nTrialTotal = dim(use.data)[2],
                                                    nCoins      = length(unique(use.data['coin', ])),
                                                    coin        = use.data['coin', ]),
                             n.chains = chain.count, n.adapt = adapt.steps);

update(jagsPriorModel, n.iter = burnin.steps);

coda.prior.sample.data <- coda.samples(jagsPriorModel, variable.names = c('mu', 'theta'), n.iter = sample.count);
mcmc.prior.samples     <- as.matrix(coda.prior.sample.data);

### Prior data can be plotted directly
plot(coda.prior.sample.data)


jagsPosteriorModel <- jags.model(jags.file, data = list(nTrialTotal = dim(use.data)[2],
                                                        nCoins      = length(unique(use.data['coin', ])),
                                                        coin        = use.data['coin', ],
                                                        y           = use.data['cointoss', ]),
                                 n.chains = chain.count, n.adapt = adapt.steps);

update(jagsPosteriorModel, n.iter = burnin.steps);

coda.posterior.sample.data <- coda.samples(jagsPosteriorModel, variable.names = c('mu', 'theta'), n.iter = sample.count);
mcmc.posterior.samples     <- as.matrix(coda.posterior.sample.data);

### Posterior data can be plotted directly
plot(coda.posterior.sample.data)

twocoin.data <- readRDS('singlemint_twocoin.rds');

use.data <- twocoin.data;
sample.count <- 10000;

chain.count  <- 5;
adapt.steps  <- 500;
burnin.steps <- 1000;

jags.file <- 'singlemint_full.jag';


### First we set up the model and check the priors
jagsPriorModel <- jags.model(jags.file, data = list(nTrialTotal = dim(use.data)[2],
                                                    nCoins      = length(unique(use.data['coin', ])),
                                                    coin        = use.data['coin', ]),
                             n.chains = chain.count, n.adapt = adapt.steps);

update(jagsPriorModel, n.iter = burnin.steps);

coda.prior.full.sample.data <- coda.samples(jagsPriorModel, variable.names = c('mu', 'kappa', 'theta'), n.iter = sample.count);
mcmc.prior.full.samples     <- as.matrix(coda.prior.sample.data);

### Prior data can be plotted directly
plot(coda.prior.sample.data)


jagsPosteriorModel <- jags.model(jags.file, data = list(nTrialTotal = dim(use.data)[2],
                                                        nCoins      = length(unique(use.data['coin', ])),
                                                        coin        = use.data['coin', ],
                                                        y           = use.data['cointoss', ]),
                                 n.chains = chain.count, n.adapt = adapt.steps);

update(jagsPosteriorModel, n.iter = burnin.steps);

coda.posterior.full.sample.data <- coda.samples(jagsPosteriorModel, variable.names = c('mu', 'kappa', 'theta'), n.iter = sample.count);
mcmc.posterior.full.samples     <- as.matrix(coda.posterior.sample.data);

### Posterior data can be plotted directly
plot(coda.posterior.sample.data)

twocoin.data <- readRDS('singlemint_twocoin.rds');

use.data <- twocoin.data;
sample.count <- 10000;

chain.count  <- 5;
adapt.steps  <- 500;
burnin.steps <- 1000;

jags.file <- 'singlemint_full.jag';


### First we set up the model and check the priors
jagsPriorModel <- jags.model(jags.file, data = list(nTrialTotal = dim(use.data)[2],
                                                    nCoins      = length(unique(use.data['coin', ])),
                                                    coin        = use.data['coin', ]),
                             n.chains = chain.count, n.adapt = adapt.steps);

update(jagsPriorModel, n.iter = burnin.steps);

coda.prior.full.sample.data <- coda.samples(jagsPriorModel, variable.names = c('mu', 'kappa', 'theta'), n.iter = sample.count);
mcmc.prior.full.samples     <- as.matrix(coda.prior.sample.data);

### Prior data can be plotted directly
plot(coda.prior.full.sample.data)


jagsPosteriorModel <- jags.model(jags.file, data = list(nTrialTotal = dim(use.data)[2],
                                                        nCoins      = length(unique(use.data['coin', ])),
                                                        coin        = use.data['coin', ],
                                                        y           = use.data['cointoss', ]),
                                 n.chains = chain.count, n.adapt = adapt.steps);

update(jagsPosteriorModel, n.iter = burnin.steps);

coda.posterior.full.sample.data <- coda.samples(jagsPosteriorModel, variable.names = c('mu', 'kappa', 'theta'), n.iter = sample.count);
mcmc.posterior.full.samples     <- as.matrix(coda.posterior.sample.data);

### Posterior data can be plotted directly
plot(coda.posterior.full.sample.data)

qplot(mcmc.prior.samples[, 'mu'], geom = 'density') + geom_density(aes(x = mcmc.posterior.samples[, 'mu']), colour = 'red')
qplot(mcmc.prior.samples[, 'mu'], geom = 'density') + geom_density(aes(x = mcmc.posterior.samples[, 'mu']), colour = 'red') + geom_density(aes(x = mcmc.posterior.full.samples[, 'mu']), colour = 'blue')
twocoin.data <- readRDS('singlemint_twocoin.rds');

use.data <- twocoin.data;
sample.count <- 10000;

chain.count  <- 5;
adapt.steps  <- 500;
burnin.steps <- 1000;

jags.file <- 'singlemint_multiplecoin.jag';


### First we set up the model and check the priors
jagsPriorModel <- jags.model(jags.file, data = list(nTrialTotal = dim(use.data)[2],
                                                    nCoins      = length(unique(use.data['coin', ])),
                                                    coin        = use.data['coin', ]),
                             n.chains = chain.count, n.adapt = adapt.steps);

update(jagsPriorModel, n.iter = burnin.steps);

coda.prior.sample.data <- coda.samples(jagsPriorModel, variable.names = c('mu', 'theta'), n.iter = sample.count);
mcmc.prior.samples     <- as.matrix(coda.prior.sample.data);

### Prior data can be plotted directly
plot(coda.prior.sample.data)


jagsPosteriorModel <- jags.model(jags.file, data = list(nTrialTotal = dim(use.data)[2],
                                                        nCoins      = length(unique(use.data['coin', ])),
                                                        coin        = use.data['coin', ],
                                                        y           = use.data['cointoss', ]),
                                 n.chains = chain.count, n.adapt = adapt.steps);

update(jagsPosteriorModel, n.iter = burnin.steps);

coda.posterior.sample.data <- coda.samples(jagsPosteriorModel, variable.names = c('mu', 'theta'), n.iter = sample.count);
mcmc.posterior.samples     <- as.matrix(coda.posterior.sample.data);

### Posterior data can be plotted directly
plot(coda.posterior.sample.data)

qplot(mcmc.prior.samples[, 'mu'], geom = 'density') + geom_density(aes(x = mcmc.posterior.samples[, 'mu']), colour = 'red') + geom_density(aes(x = mcmc.posterior.full.samples[, 'mu']), colour = 'blue')
qplot(mcmc.prior.samples[, 'mu'], geom = 'density', xlab = expression(mu), ylab = 'Probability Density') + geom_density(aes(x = mcmc.posterior.samples[, 'mu']), colour = 'red') + geom_density(aes(x = mcmc.posterior.full.samples[, 'mu']), colour = 'blue')
coin1 <- rbinom(10, 1, 0.62);
coin2 <- rbinom(20, 1, 0.63);
coin3 <- rbinom(15, 1, 0.59);
coin4 <- rbinom(25, 1, 0.61);
coin5 <- rbinom(20, 1, 0.60);

coin.tight <- rbind(coin     = c(rep(1, 10), rep(2, 20), rep(3, 15), rep(4, 25), rep(5, 20)),
                    cointoss = c(coin1,      coin2,      coin3,      coin4,      coin5));

coin.tight
coin4
rep(4, 25)
source('helper_functions.R')
args(generate.hierarchical.coin.data)
args(generate.hierarchical.coin.data)
q()
y
